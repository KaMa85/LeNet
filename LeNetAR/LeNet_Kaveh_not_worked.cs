using UnityEngine;
using System;
using System.Linq;
using System.Collections;
using UnityEngine.Windows.WebCam;
using Microsoft.MixedReality.Toolkit;
using UnityEngine.Windows.Speech;
using System.Collections.Generic;

public class LeNet_Kaveh : MonoBehaviour
{
    public string text;
    PhotoCapture photoCaptureObject = null;
    Texture2D targetTexture = null;
    public float DTC;
    public Material OutputMaterial;
    public Texture2D StaticTexture;
    int n1, m1;
    public int pred=0;
    public bool isCollect = false;
    CameraParameters cameraParameters = new CameraParameters();
    Renderer rndr;
    Texture texture = null;
    KeywordRecognizer keywordRecognizer;
    Dictionary<string, System.Action> keywords = new Dictionary<string, System.Action>();
    void Start()
    {
        rndr = GetComponent<Renderer>();
        Resolution cameraResolution = PhotoCapture.SupportedResolutions.OrderByDescending((res) => res.width * res.height).First();
        targetTexture = new Texture2D(cameraResolution.width, cameraResolution.height);

        // Create a PhotoCapture object
        PhotoCapture.CreateAsync(false, delegate (PhotoCapture captureObject)
        {
            photoCaptureObject = captureObject;
            cameraParameters.hologramOpacity = 0.5f;
            cameraParameters.cameraResolutionWidth = cameraResolution.width;
            cameraParameters.cameraResolutionHeight = cameraResolution.height;
            cameraParameters.pixelFormat = CapturePixelFormat.BGRA32;
            print(cameraResolution.width);
            print(cameraResolution.height);

            // Activate the camera
            photoCaptureObject.StartPhotoModeAsync(cameraParameters, delegate (PhotoCapture.PhotoCaptureResult result)
            {
            });
        });
        //Create keywords for keyword recognizer
        keywords.Add("collect", () =>
        {
            photoCaptureObject.TakePhotoAsync(OnCapturedPhotoToMemory);
            isCollect = true;
        });
        keywords.Add("remove", () =>
        {
            if (isCollect)
            {
                gameObject.GetComponent<Renderer>().enabled = false;
                isCollect = false;
            }
        });
        keywordRecognizer = new KeywordRecognizer(keywords.Keys.ToArray());
        keywordRecognizer.OnPhraseRecognized += KeywordRecognizer_OnPhraseRecognized;
        keywordRecognizer.Start();
    }
    private void Update()
    {
        

    }
    private void KeywordRecognizer_OnPhraseRecognized(PhraseRecognizedEventArgs args)
    {
        System.Action keywordAction;
        // if the keyword recognized is in our dictionary, call that Action.
        if (keywords.TryGetValue(args.text, out keywordAction))
        {
            keywordAction.Invoke();
        }
    }
    void OnCapturedPhotoToMemory(PhotoCapture.PhotoCaptureResult result, PhotoCaptureFrame photoCaptureFrame)
    {
        // Copy the raw image data into our target texture
        photoCaptureFrame.UploadImageDataToTexture(targetTexture);
        // Copy the raw image data into our target texture
    RaycastHit hit;
        if (Physics.Raycast(Camera.main.transform.position, Camera.main.transform.forward, out hit, float.PositiveInfinity, LayerMask.GetMask("Spatial Awareness")))
        {
            float distanceToCrack = Vector3.Distance(hit.point, Camera.main.transform.position);
            DTC = distanceToCrack;
        }
        // duplicate the original texture and assign to the material
        // tint each mip level
        var cols = targetTexture.GetPixels32(0);
        n1 = (int)Mathf.Floor(targetTexture.height / 2 - 32 * 3 / 2);
        m1 = (int)Mathf.Floor(targetTexture.width/2 - 32 * 3 / 2);
        double[] grey_rect = new double[32 * 32];
        int ind_i=0, ind_j=0;


        for (int i = n1; i < n1 + 3 * 32; i += 3)
        {
            for (int j = m1; j < m1 + 3 * 32; j += 3)
            {
                grey_rect[ind_i + ind_j * 32] =
                    0.587 * (cols[i * targetTexture.width + j].g + cols[i * targetTexture.width + j - targetTexture.width - 1].g +
                    cols[i * targetTexture.width + j - targetTexture.width + 1].g + cols[i * targetTexture.width + j - 1].g + cols[i * targetTexture.width + j + 1].g +
                    cols[i * targetTexture.width + j + targetTexture.width - 1].g + cols[i * targetTexture.width + j + targetTexture.width + 1].g +
                    cols[i * targetTexture.width + j - targetTexture.width].g + cols[i * targetTexture.width + j + targetTexture.width].g) +
                    0.299 * (cols[i * targetTexture.width + j].r + cols[i * targetTexture.width + j - targetTexture.width - 1].r +
                    cols[i * targetTexture.width + j - targetTexture.width + 1].r + cols[i * targetTexture.width + j - 1].r + cols[i * targetTexture.width + j + 1].r +
                    cols[i * targetTexture.width + j + targetTexture.width - 1].r + cols[i * targetTexture.width + j + targetTexture.width + 1].r +
                    cols[i * targetTexture.width + j - targetTexture.width].r + cols[i * targetTexture.width + j + targetTexture.width].r) +
                    0.114 * (cols[i * targetTexture.width + j].b + cols[i * targetTexture.width + j - targetTexture.width - 1].b +
                    cols[i * targetTexture.width + j - targetTexture.width + 1].b + cols[i * targetTexture.width + j - 1].b + cols[i * targetTexture.width + j + 1].b +
                    cols[i * targetTexture.width + j + targetTexture.width - 1].b + cols[i * targetTexture.width + j + targetTexture.width + 1].b +
                    cols[i * targetTexture.width + j - targetTexture.width].b + cols[i * targetTexture.width + j + targetTexture.width].b);
                ind_j++;
            }
            ind_i++;
            ind_j = 0;
        }



        // First convolution (first layer i.e., image to second layer)
        double[] conv1_weight_0 = new double[]
        {
        -0.011, -0.1427, -0.1903, -0.3354, -0.0851, -0.1643, -0.1286, -0.3591, -0.0863, 0.1598, 0.084, -0.2931, -0.0535, 0.4418, 0.3627, 0.4161, 0.0728, 0.1063, 0.1174, -0.2518, 0.1052, 0.0885, 0.1357, 0.1211, -0.2999
        };

        double[] conv1_weight_1 = new double[]
        {
        -0.4011, -0.0836, -0.014, 0.0584, 0.1431, -0.3234, 0.1139, -0.0102, 0.2947, 0.1712, -0.3235, -0.0978, 0.383, 0.3269, 0.0879, -0.1618, 0.2292, 0.2021, 0.2099, -0.261, 0.0929, 0.1548, 0.0836, -0.1773, -0.292
        };

        double[] conv1_weight_2 = new double[]
        {
        -0.2868, 0.0213, 0.2315, 0.036, -0.0068, 0.3222, 0.0904, 0.0353, -0.1416, -0.1928, 0.0838, -0.2496, -0.2423, -0.0508, 0.1672, -0.2873, 0.1251, -0.0628, 0.275, 0.2391, 0.0813, 0.2482, -0.0053, -0.2134, -0.0545
        };

        double[] conv1_weight_3 = new double[]
        {
        -0.1733, 0.1119, -0.0191, -0.1138, -0.045, -0.0656, 0.1347, 0.1196, 0.0555, -0.191, 0.0416, 0.1583, -0.0066, -0.1445, -0.1753, 0.0438, 0.4356, 0.2995, -0.1321, -0.3908, 0.0914, 0.3277, 0.1445, 0.0319, -0.4282
        };

        double[] conv1_weight_4 = new double[]
        {
        -0.089, 0.3982, 0.0195, 0.0925, 0.2449, 0.1693, 0.2244, 0.4105, 0.1021, 0.3929, -0.0891, -0.0605, 0.1327, 0.2838, -0.0597, -0.3588, -0.444, -0.4219, -0.4696, -0.0646, -0.2252, -0.6029, -0.6996, -0.4065, -0.1719
        };

        double[] conv1_weight_5 = new double[]
        {
        0.0539, -0.1596, 0.1074, 0.1936, 0.074, -0.0058, -0.2195, -0.42, -0.1502, -0.128, 0.2611, -0.3387, -0.2727, -0.3027, -0.3124, 0.2238, 0.1067, -0.1114, -0.0899, 0.0248, 0.3108, 0.4757, 0.5179, 0.4184, 0.2931
        };

        double[] conv1_bias = new double[]
        {
        -0.0182, -0.1788, -0.2095, -0.0573, 0.137, -0.0677
        };
        double[] l2c0 = new double[28 * 28];
        double[] l2c1 = new double[28 * 28];
        double[] l2c2 = new double[28 * 28];
        double[] l2c3 = new double[28 * 28];
        double[] l2c4 = new double[28 * 28];
        double[] l2c5 = new double[28 * 28];

        for (int i = 2; i < 30; i++)
        {
            for (int j = 2; j < 30; j++)
            {
                int index = (i - 2) * 28 + (j - 2);
                int index_img = (i - 2) * 32 + (j - 2);

                l2c0[index] = Math.Max(
                    SumProduct(grey_rect, conv1_weight_0, index_img, 0, 5) +
                    SumProduct(grey_rect, conv1_weight_0, index_img + 32, 5, 5) +
                    SumProduct(grey_rect, conv1_weight_0, index_img + 64, 10, 5) +
                    SumProduct(grey_rect, conv1_weight_0, index_img + 96, 15, 5) +
                    SumProduct(grey_rect, conv1_weight_0, index_img + 128, 20, 5) + conv1_bias[0], 0);

                l2c1[index] = Math.Max(
                    SumProduct(grey_rect, conv1_weight_1, index_img, 0, 5) +
                    SumProduct(grey_rect, conv1_weight_1, index_img + 32, 5, 5) +
                    SumProduct(grey_rect, conv1_weight_1, index_img + 64, 10, 5) +
                    SumProduct(grey_rect, conv1_weight_1, index_img + 96, 15, 5) +
                    SumProduct(grey_rect, conv1_weight_1, index_img + 128, 20, 5) + conv1_bias[1], 0);
                l2c2[index] = Math.Max(
                    SumProduct(grey_rect, conv1_weight_2, index_img, 0, 5) +
                    SumProduct(grey_rect, conv1_weight_2, index_img + 32, 5, 5) +
                    SumProduct(grey_rect, conv1_weight_2, index_img + 64, 10, 5) +
                    SumProduct(grey_rect, conv1_weight_2, index_img + 96, 15, 5) +
                    SumProduct(grey_rect, conv1_weight_2, index_img + 128, 20, 5) + conv1_bias[2], 0);

                l2c3[index] = Math.Max(
                    SumProduct(grey_rect, conv1_weight_3, index_img, 0, 5) +
                    SumProduct(grey_rect, conv1_weight_3, index_img + 32, 5, 5) +
                    SumProduct(grey_rect, conv1_weight_3, index_img + 64, 10, 5) +
                    SumProduct(grey_rect, conv1_weight_3, index_img + 96, 15, 5) +
                    SumProduct(grey_rect, conv1_weight_3, index_img + 128, 20, 5) + conv1_bias[3], 0);

                l2c4[index] = Math.Max(
                    SumProduct(grey_rect, conv1_weight_4, index_img, 0, 5) +
                    SumProduct(grey_rect, conv1_weight_4, index_img + 32, 5, 5) +
                    SumProduct(grey_rect, conv1_weight_4, index_img + 64, 10, 5) +
                    SumProduct(grey_rect, conv1_weight_4, index_img + 96, 15, 5) +
                    SumProduct(grey_rect, conv1_weight_4, index_img + 128, 20, 5) + conv1_bias[4], 0);

                l2c5[index] = Math.Max(
                    SumProduct(grey_rect, conv1_weight_5, index_img, 0, 5) +
                    SumProduct(grey_rect, conv1_weight_5, index_img + 32, 5, 5) +
                    SumProduct(grey_rect, conv1_weight_5, index_img + 64, 10, 5) +
                    SumProduct(grey_rect, conv1_weight_5, index_img + 96, 15, 5) +
                    SumProduct(grey_rect, conv1_weight_5, index_img + 128, 20, 5) + conv1_bias[5], 0);
            }
        }


        // First maxpool (second layer to third layer) 
        double[] l3c0 = new double[14 * 14];
        double[] l3c1 = new double[14 * 14];
        double[] l3c2 = new double[14 * 14];
        double[] l3c3 = new double[14 * 14];
        double[] l3c4 = new double[14 * 14];
        double[] l3c5 = new double[14 * 14];
       ind_i = 0;
       ind_j = 0;
        for (int i = 0; i < 28; i += 2)
        {
            for (int j = 0; j < 28; j += 2)
            {
                l3c0[ind_i * 14 + ind_j] = Math.Max(l2c0[i * 28 + j], Math.Max(l2c0[i * 28 + j + 1], Math.Max(l2c0[(i + 1) * 28 + j], l2c0[(i + 1) * 28 + j + 1])));
                l3c1[ind_i * 14 + ind_j] = Math.Max(l2c1[i * 28 + j], Math.Max(l2c1[i * 28 + j + 1], Math.Max(l2c1[(i + 1) * 28 + j], l2c1[(i + 1) * 28 + j + 1])));
                l3c2[ind_i * 14 + ind_j] = Math.Max(l2c2[i * 28 + j], Math.Max(l2c2[i * 28 + j + 1], Math.Max(l2c2[(i + 1) * 28 + j], l2c2[(i + 1) * 28 + j + 1])));
                l3c3[ind_i * 14 + ind_j] = Math.Max(l2c3[i * 28 + j], Math.Max(l2c3[i * 28 + j + 1], Math.Max(l2c3[(i + 1) * 28 + j], l2c3[(i + 1) * 28 + j + 1])));
                l3c4[ind_i * 14 + ind_j] = Math.Max(l2c4[i * 28 + j], Math.Max(l2c4[i * 28 + j + 1], Math.Max(l2c4[(i + 1) * 28 + j], l2c4[(i + 1) * 28 + j + 1])));
                l3c5[ind_i * 14 + ind_j] = Math.Max(l2c5[i * 28 + j], Math.Max(l2c5[i * 28 + j + 1], Math.Max(l2c5[(i + 1) * 28 + j], l2c5[(i + 1) * 28 + j + 1])));
                ind_j++;
            }
            ind_i++;
            ind_j = 0;
        }

        // Second convolution (Third layer to fourth layer)
        double[] conv2_weight_0 = new double[]
        {
        0.0049, 0.2296, 0.0605, 0.0158, -0.0711, -0.1286, -0.0212, -0.0328, 0.0087, -0.2887, 0.1437, 0.0267, -0.1874, -0.1918, -0.4763, 0.1217, -0.1518, -0.208, -0.1156, 0.0324, -0.2818, -0.3352, -0.0711, 0.0891, -0.0268, -0.1998, -0.0153, -0.0276, -0.0112, -0.1803, -0.0088, 0.068, 0.1476, 0.0342, -0.3214, 0.0544, 0.2726, 0.243, -0.2536, -0.0918, 0.0724, 0.1704, -0.0707, -0.4363, -0.1963, 0.0599, -0.3223, -0.1508, -0.0199, 0.0495, 0.2261, 0.1591, -0.1541, 0.0421, -0.1336, 0.1349, 0.0986, 0.134, -0.184, -0.0403, 0.2462, 0.1118, -0.1257, -0.1628, -0.3723, 0.1486, 0.0939, 0.1073, -0.0873, 0.0155, 0.0183, 0.0598, 0.1175, 0.0183, 0.0389, 0.0462, 0.0211, 0.2633, -0.0514, -0.0436, -0.1204, 0.1435, 0.1772, -0.0425, -0.1295, 0.113, 0.1058, 0.0888, -0.1942, -0.2859, 0.0796, -0.0423, -0.0755, -0.3092, -0.0801, -0.0816, -0.0397, -0.0245, -0.0383, 0.193, -0.267, -0.2248, -0.3506, -0.3037, -0.0226, -0.2339, -0.2505, -0.2814, -0.0734, 0.0649, -0.0831, 0.0073, 0.0439, 0.044, 0.1168, 0.1675, 0.1318, 0.0336, 0.0673, -0.0294, 0.1984, -0.0206, -0.2896, -0.2557, 0.0403, 0.2278, 0.0035, 0.1574, 0.1251, -0.0643, -0.0632, -0.2306, -0.212, -0.0912, -0.0861, 0.0266, -0.3638, -0.2362, -0.0048, -0.2498, -0.3409, -0.3724, -0.1778, 0.0099, 0.2268, -0.3267, 0.149, 0.1522, 0.1193, 0.1669
        };

        double[] conv2_weight_1 = new double[]
        {
        0.0925, 0.1569, 0.0702, -0.1, 0.0432, -0.023, -0.1147, 0.0017, 0.1424, 0.0232, -0.2001, -0.2113, -0.0977, -0.4486, -0.5757, -0.0963, -0.0118, -0.0791, 0.0288, 0.1234, -0.0657, 0.1252, 0.0316, 0.1584, 0.0301, -0.058, 0.0797, 0.0764, -0.1289, 0.0123, -0.0354, -0.029, -0.0565, 0.0666, 0.0721, -0.0862, -0.0462, -0.0796, -0.122, -0.2362, -0.3804, -0.2585, -0.1627, -0.0776, 0.1175, -0.1356, -0.0535, -0.0237, 0.0965, 0.1474, -0.0642, 0.0626, -0.075, 0.2132, 0.2966, -0.0468, 0.0919, 0.1179, 0.229, -0.1329, -0.2523, -0.0936, -0.3734, -0.1103, 0.0676, -0.1373, -0.1131, 0.0315, 0.1087, -0.0076, 0.0273, -0.0806, -0.1269, -0.0413, -0.1245, 0.0572, -0.0305, -0.0904, -0.097, 0.0955, -0.0953, -0.111, -0.147, -0.092, -0.0325, -0.1304, -0.2086, -0.3071, -0.5238, -0.3106, -0.1327, -0.0999, -0.1787, -0.0318, 0.1063, -0.0453, 0.0857, 0.0559, 0.1464, 0.0855, -0.1768, -0.0541, -0.1561, -0.1286, -0.0858, 0.0521, 0.0949, -0.0646, -0.0217, 0.1815, 0.1039, 0.3194, 0.3379, 0.2838, 0.1166, -0.0258, 0.0814, 0.084, -0.3885, -0.4552, -0.041, -0.2649, -0.2768, 0.0987, 0.2854, 0.0672, 0.1189, 0.0027, 0.1794, 0.2871, 0.0305, 0.2058, 0.1137, 0.0359, -0.3472, -0.0892, -0.0284, -0.3556, -0.3475, -0.1377, 0.0859, 0.1535, 0.0708, 0.011, 0.0339, -0.0684, 0.064, 0.0461, -0.1335, -0.1179
        };

        double[] conv2_weight_2 = new double[]
        {
        0.07, -0.1166, -0.2196, 0.0595, 0.0344, 0.0562, -0.105, -0.1869, 0.2573, 0.2904, 0.1215, 0.0124, 0.1362, 0.2216, 0.085, 0.0902, -0.0743, -0.1259, -0.1431, 0.0896, -0.1431, -0.1877, -0.2307, -0.1829, -0.051, 0.0046, -0.0296, 0.0245, -0.2477, -0.1613, -0.019, -0.1232, -0.0793, 0.0225, 0.2564, 0.0192, 0.1115, 0.2224, 0.1513, 0.0991, 0.0312, 0.087, 0.0844, 0.015, -0.0227, -0.1801, 0.0937, 0.0202, -0.1187, -0.205, -0.1818, -0.1083, -0.1362, 0.0008, 0.0593, -0.0609, 0.0451, 0.1193, 0.2327, 0.083, -0.0065, -0.0811, 0.0358, 0.0762, 0.1794, 0.0546, -0.1037, -0.0824, 0.1643, 0.0745, 0.0806, 0.0068, -0.0067, -0.0846, -0.2327, 0.0504, -0.2252, 0.0553, 0.0924, -0.1032, 0.1335, -0.2741, -0.0847, -0.0376, 0.0171, 0.1891, -0.2856, 0.0757, 0.0467, -0.0602, -0.0245, -0.2486, 0.0852, 0.1679, 0.012, -0.209, -0.0442, 0.1766, 0.2371, 0.08, -0.0329, 0.0206, -0.0811, -0.0167, -0.3438, -0.0193, -0.0582, -0.1906, -0.339, -0.1337, -0.1204, -0.3006, -0.397, -0.4097, -0.3507, 0.1991, -0.1116, -0.3901, -0.2459, 0.1914, -0.0545, -0.0652, -0.1554, 0.0686, 0.3623, 0.1561, -0.1316, -0.1004, 0.1678, 0.2468, 0.1726, 0.0514, 0.0912, 0.151, 0.0775, 0.309, 0.0869, -0.1779, -0.136, -0.0134, -0.0191, -0.3057, -0.5177, -0.0264, 0.1298, 0.0402, -0.4437, -0.248, 0.1612, 0.2955
        };

        double[] conv2_weight_3 = new double[]
        {
        0.0378, 0.1471, -0.287, -0.0954, 0.1489, -0.0504, 0.1587, -0.1004, -0.0378, 0.1073, 0.0259, 0.0281, -0.2382, -0.2209, 0.098, -0.161, -0.0895, -0.0919, -0.1018, 0.0274, -0.16, -0.0902, -0.0174, 0.0669, 0.161, -0.1047, -0.046, -0.1777, -0.0057, 0.1488, 0.044, -0.0251, -0.3552, 0.2165, 0.2366, 0.1175, 0.0432, -0.5689, 0.1613, 0.2732, 0.2081, 0.0685, -0.3418, -0.0019, 0.143, 0.0279, -0.128, -0.1226, 0.0361, 0.2359, 0.2126, -0.038, -0.1317, -0.0089, 0.0371, 0.1271, -0.0004, -0.1794, -0.1066, 0.0563, 0.1137, -0.2361, -0.0468, -0.162, 0.0705, -0.042, 0.0143, -0.1373, -0.0184, 0.1379, 0.0935, -0.0003, -0.1252, 0.0346, 0.0968, 0.1755, 0.1841, 0.0074, -0.4044, 0.0221, 0.2259, 0.2839, -0.1429, -0.3906, 0.2733, 0.2723, 0.235, -0.1264, -0.0997, 0.109, 0.0822, 0.069, -0.1588, -0.1649, 0.2173, 0.1229, -0.0387, -0.0497, -0.0495, 0.225, 0.0032, 0.1968, 0.2095, 0.1132, 0.0365, -0.1638, -0.3912, -0.1346, -0.2743, -0.2178, -0.2525, -0.2858, -0.2444, -0.4849, -0.6103, -0.1235, -0.1947, -0.2403, -0.2937, -0.622, -0.0028, -0.2808, -0.221, -0.1993, 0.0175, 0.0859, 0.1855, -0.0424, 0.0157, 0.0021, -0.1065, 0.281, -0.1342, -0.2635, 0.0479, -0.1884, 0.0375, -0.1564, -0.3357, -0.1188, -0.2534, -0.0493, -0.1903, -0.2321, -0.0544, -0.0477, 0.1387, 0.1512, 0.0732, 0.0923
        };

        double[] conv2_weight_4 = new double[]
        {
        0.1644, 0.1487, 0.1366, -0.0194, 0.0482, 0.0169, 0.0127, 0.2386, 0.1466, -0.079, -0.1414, -0.2835, 0.1738, 0.4035, -0.0098, -0.311, -0.322, -0.3822, 0.0832, 0.1529, 0.0532, -0.0099, -0.2743, -0.3207, 0.0137, 0.0835, 0.2606, 0.0884, -0.0745, -0.0055, -0.0529, -0.0747, 0.1621, 0.0243, 0.0263, 0.0724, -0.3307, -0.2488, 0.0866, 0.061, -0.1211, -0.0943, -0.1937, -0.0786, 0.0266, 0.0952, 0.1094, 0.1222, -0.063, -0.1577, -0.0178, 0.0492, -0.0831, -0.0677, 0.0057, 0.1783, 0.0524, 0.2168, 0.1282, -0.0946, -0.093, 0.1111, 0.0854, 0.1375, -0.0787, -0.0723, -0.078, -0.0826, 0.0697, 0.0725, 0.1575, -0.3148, -0.0679, 0.0169, -0.0152, 0.0954, 0.1822, 0.0451, -0.0297, 0.0295, -0.1691, 0.1836, 0.1761, 0.0264, -0.216, -0.0397, -0.3269, 0.1698, 0.1389, -0.1307, -0.0662, -0.5489, -0.221, 0.1278, -0.0161, -0.0775, 0.056, -0.0812, 0.1429, -0.0134, -0.4348, -0.3464, -0.0557, 0.0045, 0.0009, -0.0297, -0.3967, -0.6774, -0.1144, -0.0749, 0.0938, -0.0152, -0.3999, -0.579, -0.1557, 0.0363, 0.1199, 0.1547, 0.0376, -0.0246, -0.2311, -0.2447, -0.0159, -0.0125, 0.0176, -0.0449, 0.0871, 0.0523, -0.0675, 0.0149, -0.3391, 0.0426, 0.2939, 0.0505, -0.2486, -0.5572, -0.3791, 0.4684, 0.6061, 0.0126, -0.0954, -0.3274, -0.458, 0.2637, 0.262, -0.0842, 0.0046, -0.2596, -0.3003, -0.0117
        };

        double[] conv2_weight_5 = new double[]
        {
        -0.2683, -0.2408, 0.0234, 0.1499, 0.2232, 0.072, -0.0373, -0.0196, 0.0779, 0.1272, 0.1868, -0.1092, -0.2514, 0.0827, 0.138, 0.0116, -0.0887, -0.3571, -0.1855, 0.1429, 0.2003, 0.0872, -0.1344, -0.4506, 0.0988, -0.1177, 0.1752, 0.1465, 0.1676, 0.0971, 0.0633, 0.1213, 0.1068, 0.1564, 0.055, 0.0771, -0.0406, -0.054, -0.1062, -0.0277, -0.0801, -0.1971, 0.0383, -0.1576, 0.058, -0.0886, -0.0716, 0.0146, 0.0144, -0.0938, -0.1233, 0.0017, 0.1464, 0.3129, -0.0226, -0.1938, 0.0343, 0.0568, 0.2279, -0.017, 0.1158, -0.0355, -0.0517, 0.2597, 0.1206, 0.0066, -0.0834, -0.0179, -0.0803, 0.1164, 0.1351, 0.0511, -0.1304, -0.0075, -0.0453, -0.5091, -0.1509, 0.0547, 0.0366, -0.0237, -0.0107, -0.1739, 0.0615, 0.1766, -0.2429, 0.1037, -0.2147, 0.061, 0.1913, -0.1052, 0.2252, -0.2991, -0.1229, 0.0521, 0.0009, 0.2494, 0.0288, -0.0634, 0.0477, 0.1034, 0.1886, 0.2134, -0.0572, -0.1385, 0.1049, -0.0666, 0.0704, -0.3392, -0.3314, -0.1096, 0.0659, -0.0017, -0.2026, -0.5055, -0.1821, -0.0963, -0.0221, 0.0185, -0.0527, -0.2169, -0.1782, -0.1023, 0.0366, -0.0633, -0.2055, -0.1442, -0.2746, 0.0278, 0.2173, 0.2098, 0.035, -0.2789, -0.2959, -0.0036, 0.2997, 0.0552, -0.3837, -0.5101, 0.2288, 0.2644, 0.2374, 0.0406, -0.5477, 0.0144, 0.2207, 0.3132, 0.1334, -0.2451, -0.322, 0.1418
        };

        double[] conv2_weight_6 = new double[]
        {
        0.0226, -0.0253, -0.1658, -0.1307, -0.0177, -0.0518, -0.3704, -0.1641, 0.1392, 0.1926, 0.0116, -0.3246, -0.4695, 0.0192, 0.1955, 0.1432, -0.0344, -0.1091, -0.1233, -0.3292, 0.06, 0.075, 0.0519, 0.0339, 0.1276, 0.0672, 0.0465, 0.1043, 0.1614, 0.0515, -0.1512, -0.2688, -0.036, 0.2421, 0.2085, -0.3495, -0.4594, -0.1472, 0.1933, 0.2491, -0.3423, -0.4874, -0.3089, 0.0093, -0.2406, -0.1751, -0.2537, -0.3136, -0.15, 0.0346, 0.0286, -0.1561, -0.0837, 0.1405, 0.1633, -0.0162, -0.2096, 0.0114, 0.0579, 0.164, -0.2406, -0.3816, -0.221, 0.0067, 0.1184, -0.0817, -0.3292, -0.2425, -0.2773, -0.0814, 0.0688, -0.0258, -0.0304, 0.0213, 0.0314, 0.1768, -0.0832, -0.0476, -0.3398, -0.1296, -0.1102, -0.2515, -0.3849, -0.1611, -0.0429, -0.0095, -0.3784, -0.6083, -0.3516, 0.0847, 0.1241, 0.0063, -0.1461, -0.4247, -0.4836, 0.0378, 0.0286, 0.1213, -0.0914, 0.0224, 0.1278, 0.2655, -0.015, -0.1178, -0.1627, 0.1229, 0.0062, -0.1307, -0.2408, -0.0036, -0.2333, -0.0517, 0.0881, 0.283, 0.3654, -0.3939, -0.2355, 0.0562, 0.4573, 0.3978, -0.1514, -0.2617, -0.1513, -0.3681, -0.4569, -0.0547, -0.3213, -0.3331, -0.2301, -0.0376, -0.1512, -0.4685, -0.4329, 0.0129, 0.0263, 0.1349, -0.3216, -0.4757, 0.1243, 0.0291, 0.3726, 0.2713, 0.3202, 0.0581, -0.0999, 0.0232, 0.1478, 0.1998, 0.2618, 0.1854
        };

        double[] conv2_weight_7 = new double[]
        {
        -0.0302, 0.068, -0.0921, -0.0232, 0.1622, -0.0022, -0.2898, -0.2554, -0.1518, -0.0083, -0.1098, -0.1759, 0.1882, 0.1366, -0.0701, 0.0235, 0.151, 0.277, -0.0927, -0.1129, 0.1333, 0.1888, -0.0065, -0.1124, 0.0999, -0.0361, -0.0343, -0.051, -0.0034, 0.1004, 0.0859, -0.2159, -0.2506, 0.1672, 0.1993, -0.1505, -0.2658, 0.0715, 0.17, 0.1004, -0.3672, 0.1258, 0.2543, 0.2062, -0.0731, 0.1737, 0.3017, 0.1588, 0.0162, -0.1568, -0.2387, -0.118, 0.0126, 0.1572, -0.1199, -0.0451, -0.2367, -0.0955, -0.0277, 0.0987, -0.1838, -0.1944, 0.0415, -0.0323, -0.0526, 0.0914, -0.0494, -0.1088, 0.153, 0.233, 0.0618, -0.0249, 0.03, 0.0523, -0.0948, 0.01, 0.013, -0.2921, -0.038, 0.25, 0.3051, -0.2869, -0.4374, -0.0722, 0.1578, 0.1205, -0.4886, -0.1008, 0.0908, 0.1605, -0.1168, -0.039, 0.1127, 0.1, -0.0375, -0.2853, 0.1479, -0.0009, -0.0237, -0.1252, -0.0072, 0.1897, 0.1816, -0.018, -0.4562, 0.0571, 0.2946, 0.1481, -0.1841, -0.1454, 0.0442, -0.162, -0.4093, -0.2926, -0.1791, 0.0418, -0.3208, -0.1209, -0.1745, -0.0617, -0.087, -0.1875, -0.1007, -0.0123, 0.0475, 0.1321, 0.0913, -0.1097, -0.2523, -0.0845, 0.1658, -0.2424, -0.325, -0.2544, -0.0934, -0.0178, 0.0631, -0.133, -0.211, -0.0714, 0.0762, -0.0899, -0.1946, -0.2224, 0.0012, 0.0483, -0.2161, -0.2652, 0.0145, 0.1544
        };

        double[] conv2_weight_8 = new double[]
        {
        0.1623, 0.2017, -0.0295, 0.0241, 0.1449, 0.131, -0.0114, -0.1474, -0.1339, -0.0638, 0.0193, -0.411, -0.1136, -0.1194, -0.2129, -0.1832, 0.0712, -0.0956, -0.2487, -0.311, 0.0468, 0.0521, -0.0171, -0.2388, -0.1775, -0.1911, 0.0726, -0.0811, -0.0459, 0.0091, 0.1832, 0.0235, -0.0844, 0.028, 0.0248, 0.2108, -0.196, -0.0515, 0.1551, -0.1509, -0.2257, -0.4218, 0.0284, -0.0345, -0.1972, -0.2298, -0.1126, -0.081, -0.1235, -0.1771, 0.1693, -0.0018, 0.1513, 0.0926, 0.0443, -0.0128, -0.134, 0.1011, -0.0301, 0.0428, -0.0473, 0.0742, -0.0613, -0.0379, 0.0004, -0.0775, 0.1028, -0.2296, -0.2649, -0.0571, -0.0457, -0.084, -0.2721, -0.0495, -0.0527, 0.0897, 0.0822, 0.1225, 0.0446, 0.1285, 0.075, 0.0319, -0.16, -0.1452, 0.1533, -0.1625, -0.0067, -0.5096, -0.0273, -0.0194, -0.0253, -0.0454, -0.2531, -0.0334, -0.2223, 0.066, 0.194, 0.0558, -0.0086, -0.1587, 0.0898, -0.0692, -0.1294, 0.0242, 0.0128, 0.0827, 0.202, 0.1641, 0.1467, -0.0339, 0.0831, 0.1132, 0.0743, -0.0383, -0.016, -0.1273, -0.0545, -0.4252, -0.2993, -0.1274, -0.5059, -0.6034, -0.2704, -0.2332, -0.2251, 0.2208, 0.087, 0.045, 0.1342, 0.152, 0.0851, -0.0789, -0.1141, -0.5315, -0.0993, -0.1719, -0.3075, -0.4579, -0.714, -0.5713, 0.0626, -0.0678, -0.4425, -0.5767, -0.4054, 0.1756, 0.2577, 0.0914, -0.2036, -0.0323
        };

        double[] conv2_weight_9 = new double[]
        {
        -0.1335, -0.0863, -0.1024, 0.1567, 0.1713, 0.0074, -0.013, 0.096, 0.0376, -0.1188, -0.0332, -0.1997, -0.1817, -0.1562, -0.2092, -0.102, -0.0399, 0.0717, 0.2732, 0.1736, 0.0991, 0.0078, -0.0366, 0.0549, -0.2076, 0.0821, 0.02, -0.0056, 0.0349, 0.0943, 0.0758, 0.1636, 0.0243, -0.0808, -0.0895, 0.0601, -0.0568, -0.1131, -0.4698, -0.1961, -0.1744, -0.1467, -0.1553, -0.0398, 0.1059, -0.1148, -0.0792, -0.1282, 0.0317, -0.0483, -0.0218, 0.1298, 0.1519, 0.2747, 0.0698, 0.0035, 0.0351, -0.1446, -0.1441, -0.0049, -0.0277, -0.0112, -0.0356, -0.0429, 0.0612, 0.0174, 0.1351, -0.042, 0.0519, -0.1469, -0.0526, 0.0731, -0.0283, -0.0412, -0.0898, 0.152, 0.0635, 0.1796, 0.2341, 0.1278, -0.0627, -0.114, -0.1346, -0.1703, -0.2394, -0.0354, -0.0117, -0.1272, -0.4551, -0.3638, 0.0115, 0.0146, 0.1874, 0.0313, 0.0928, -0.0333, -0.0148, -0.0285, -0.0348, -0.1148, -0.1174, -0.1277, -0.0975, -0.2937, -0.0521, -0.0137, 0.0054, 0.0577, 0.1923, 0.1905, -0.1674, -0.1825, -0.0075, 0.0953, -0.1559, -0.1105, -0.0801, -0.3643, -0.4596, -0.0873, 0.035, 0.1152, 0.1956, 0.3129, 0.3029, 0.0452, 0.0616, 0.0344, 0.2973, 0.1739, -0.2328, -0.1208, -0.2101, -0.1687, -0.1626, -0.0015, 0.0508, 0.1048, 0.1639, -0.0525, 0.1511, 0.2492, 0.2859, 0.1627, -0.2597, -0.0281, -0.1018, -0.0793, -0.0245, 0.1013
        };

        double[] conv2_weight_10 = new double[]
        {
        -0.2415, -0.5124, -0.4104, -0.1429, -0.253, -0.4852, -0.1626, -0.1098, -0.1193, -0.1779, 0.0726, 0.0929, 0.1312, 0.2034, 0.2771, 0.2003, 0.1749, -0.046, 0.0431, -0.0318, 0.0227, 0.0795, 0.0007, -0.139, -0.0017, -0.1448, -0.3054, -0.1817, -0.0557, 0.0824, -0.4089, -0.3033, -0.3115, -0.2648, -0.241, -0.0136, 0.0335, -0.0571, -0.0322, 0.0501, 0.0477, 0.0913, 0.0809, 0.1122, 0.1537, -0.1073, -0.0626, 0.0799, 0.0785, -0.1036, -0.0091, -0.176, -0.1734, -0.1312, -0.3091, -0.1712, -0.2313, -0.1215, -0.0836, -0.0843, 0.1407, 0.0811, 0.1602, 0.2059, 0.0647, 0.144, 0.1262, 0.1159, 0.1547, -0.0208, 0.2107, 0.2607, 0.1567, 0.2275, 0.052, -0.1152, -0.4062, -0.3417, -0.1705, 0.2287, -0.4491, -0.2692, -0.0675, -0.3141, -0.1954, -0.0737, -0.0057, -0.0483, -0.0154, 0.0501, 0.0305, 0.0545, -0.0199, -0.2305, -0.1123, -0.1925, -0.0697, -0.1428, -0.1511, -0.0354, 0.1534, 0.1051, 0.0884, 0.1092, 0.0272, 0.1952, -0.0556, 0.1039, 0.1006, -0.0357, -0.2239, -0.0222, -0.2476, -0.1349, -0.1958, -0.0863, -0.113, -0.0379, 0.0289, 0.085, -0.1049, -0.1511, -0.1045, -0.0778, 0.0376, -0.146, -0.2872, -0.2813, -0.4534, -0.4878, -0.1131, 0.0375, 0.0929, 0.1806, 0.1313, 0.3201, 0.3292, 0.2069, 0.2157, 0.1905, 0.0727, 0.0005, -0.237, -0.1334, 0.024, -0.0939, -0.2739, -0.2428, 0.0677, -0.0956
        };

        double[] conv2_weight_11 = new double[]
        {
        0.0162, 0.0619, -0.0427, 0.1652, 0.197, -0.1668, -0.0084, 0.2068, 0.054, 0.0351, 0.0622, 0.1653, -0.0398, 0.0185, 0.0628, -0.0034, -0.2185, -0.403, -0.2132, 0.0308, -0.2686, -0.0998, 0.019, -0.1589, -0.0641, 0.1198, 0.0172, 0.1865, 0.1458, -0.0774, -0.1376, -0.0007, 0.2966, 0.0827, -0.0329, -0.1231, -0.0159, -0.2269, -0.0791, -0.0072, 0.1772, 0.0977, -0.2818, -0.1473, -0.0621, 0.0528, 0.0512, 0.1959, 0.1156, 0.2015, 0.0084, -0.1058, -0.024, 0.0745, -0.0352, 0.0698, 0.0543, 0.2004, 0.1427, -0.0414, 0.0069, 0.0579, 0.1445, 0.2168, 0.1749, -0.1906, -0.1228, 0.0649, -0.0172, 0.063, -0.0779, 0.1452, 0.026, 0.0355, -0.1642, 0.1325, -0.0322, 0.0516, 0.1396, -0.0409, 0.0578, -0.082, -0.0421, -0.0911, 0.0173, 0.0185, -0.1453, 0.0054, 0.0315, 0.029, 0.0387, -0.1845, -0.3783, -0.016, -0.0643, 0.1006, -0.1067, -0.0481, 0.0837, 0.0639, -0.1503, -0.1132, -0.2497, -0.4115, -0.4437, -0.0526, -0.3082, -0.2816, -0.3351, -0.3733, 0.11, 0.0015, -0.3433, -0.733, -0.3981, 0.2362, 0.2308, 0.193, -0.1492, -0.2416, -0.0718, -0.2248, -0.1579, 0.1849, 0.0061, -0.3111, -0.2742, -0.1778, 0.0785, 0.2462, 0.0066, 0.0332, 0.1615, 0.0881, 0.0533, 0.1743, 0.1308, 0.3217, 0.3462, 0.2912, 0.0378, -0.2188, -0.4456, -0.1909, 0.1316, -0.2304, -0.051, -0.1717, -0.1855, -0.2427
        };

        double[] conv2_weight_12 = new double[]
        {
        0.1196, -0.0055, -0.057, 0.0033, 0.0059, -0.1425, -0.2341, 0.0862, 0.1365, 0.055, -0.2002, 0.2444, 0.2494, -0.008, -0.2213, 0.1766, 0.2817, -0.0496, -0.2345, -0.0332, 0.1678, -0.1363, 0.1023, 0.0554, -0.0746, 0.1632, 0.0427, -0.1655, 0.0943, 0.0363, 0.2377, -0.3594, 0.0465, 0.2364, 0.1048, -0.243, 0.0381, 0.3657, 0.1579, -0.3004, 0.0592, 0.2405, 0.1271, -0.0994, -0.2103, 0.2315, 0.0361, -0.3201, -0.3223, -0.2088, -0.0787, 0.129, -0.1159, 0.1343, 0.0901, -0.1309, -0.0737, 0.1892, 0.2494, -0.1486, -0.1034, 0.2963, 0.1351, 0.0191, -0.0249, 0.1424, -0.1063, 0.1039, 0.1019, -0.0622, -0.2258, 0.0211, 0.1036, -0.1641, -0.2818, 0.1433, -0.08, 0.0555, 0.1956, 0.1708, 0.0632, -0.3133, -0.1477, 0.1989, 0.0764, -0.2692, -0.0728, 0.1614, 0.0705, -0.2622, -0.3504, 0.0428, -0.1177, -0.0727, -0.0173, -0.0958, -0.0744, -0.1297, 0.162, 0.0151, 0.0309, 0.1955, 0.1045, -0.2978, -0.0119, 0.2135, 0.0915, -0.3182, -0.1734, 0.0318, 0.005, -0.5417, -0.1966, 0.0205, -0.1122, -0.1221, -0.1585, -0.0321, 0.0173, -0.0984, -0.1474, -0.0125, -0.0259, -0.0603, 0.1043, -0.0005, -0.0428, -0.1026, 0.0596, 0.0135, -0.0811, -0.0011, 0.0025, 0.0604, -0.0291, 0.0848, 0.0989, -0.3042, -0.3132, -0.1031, 0.0383, -0.228, -0.204, 0.052, 0.0607, -0.1743, -0.0127, 0.2381, 0.2327, 0.2095
        };

        double[] conv2_weight_13 = new double[]
        {
        -0.1304, 0.1082, 0.1619, -0.122, 0.0163, -0.042, -0.136, -0.1443, -0.0262, 0.0858, 0.0613, 0.0394, 0.3597, 0.2019, -0.0945, -0.0038, 0.1234, 0.1002, -0.1352, -0.2163, -0.1744, -0.2697, -0.1355, 0.0141, -0.1122, 0.1365, 0.106, -0.0197, -0.1894, -0.0838, 0.1382, 0.1556, -0.2618, -0.0894, 0.0141, 0.0121, -0.0347, 0.0976, 0.2288, 0.0485, 0.0141, 0.0738, 0.0512, -0.0273, -0.2928, -0.0397, 0.0019, -0.1733, -0.0967, 0.0016, 0.0009, 0.0351, -0.0805, 0.0213, -0.1367, -0.036, 0.0018, -0.0782, 0.0205, 0.0549, 0.0231, 0.2071, 0.1839, 0.2373, -0.1357, 0.2727, 0.0609, 0.111, 0.0219, -0.0622, -0.016, -0.1193, 0.1268, 0.1461, -0.3439, -0.0789, 0.1124, 0.0763, 0.1109, -0.0743, -0.0527, 0.1106, -0.1731, 0.0415, 0.1417, -0.0012, -0.0788, 0.1549, 0.1936, 0.0725, -0.0925, -0.0826, -0.0696, -0.0796, -0.0786, 0.0436, -0.2919, -0.1943, -0.1216, 0.0757, -0.1651, -0.1661, -0.0569, -0.029, -0.2561, -0.3533, -0.5562, -0.2713, -0.227, -0.3412, -0.1037, -0.2286, -0.2682, 0.1408, 0.3183, -0.0025, 0.0712, 0.0437, 0.0227, -0.0579, 0.0602, 0.1866, 0.1857, -0.187, -0.1223, -0.2029, 0.1044, 0.1161, -0.0206, 0.1263, -0.4229, 0.0017, 0.1163, 0.0141, 0.0921, 0.2065, 0.4296, 0.2183, 0.0396, -0.097, 0.0853, -0.0213, -0.1468, -0.1029, -0.0932, -0.0438, 0.0748, 0.15, -0.1652, -0.3003
        };

        double[] conv2_weight_14 = new double[]
        {
        -0.1236, -0.0277, 0.0418, 0.0993, -0.0008, 0.1025, -0.1037, -0.3743, -0.1569, -0.0076, 0.2419, 0.1415, 0.0443, -0.0481, -0.3508, 0.0256, 0.0448, 0.2082, 0.0198, 0.0328, -0.0023, -0.1215, -0.1029, -0.0683, 0.1266, -0.0143, 0.0997, 0.1024, 0.1566, 0.3038, 0.1394, -0.0143, -0.0086, -0.1622, 0.0569, -0.0607, -0.1532, -0.1794, -0.1065, -0.0258, -0.1122, -0.3268, -0.1874, -0.1402, -0.1363, -0.126, -0.0182, 0.0381, 0.0471, -0.0433, 0.0478, -0.1391, -0.0244, 0.0298, 0.2907, -0.0976, -0.0543, -0.1353, 0.0452, -0.0169, 0.2214, 0.0094, -0.0759, -0.2456, -0.1487, 0.3123, 0.213, 0.0118, -0.0251, -0.2192, 0.1366, 0.1567, 0.146, 0.0965, -0.1237, -0.0549, 0.0729, 0.0535, 0.0855, 0.1023, -0.0584, 0.0022, -0.3291, -0.2133, -0.1031, 0.0979, 0.1771, -0.0108, -0.0348, -0.177, -0.0669, -0.009, 0.0233, 0.0232, 0.092, -0.2146, -0.0737, -0.0128, 0.051, 0.0738, 0.1758, 0.0665, -0.0908, -0.1207, -0.1354, 0.0036, 0.1911, 0.209, 0.1335, 0.0625, -0.2797, -0.1593, 0.065, 0.1762, 0.2085, 0.2167, -0.0529, -0.2746, -0.2947, -0.2944, 0.0358, -0.0305, -0.0214, -0.0887, -0.0442, -0.18, -0.256, -0.2716, -0.2588, -0.2355, 0.1779, -0.0918, -0.4852, -0.4153, -0.0861, 0.3814, 0.4638, 0.38, 0.1388, -0.2829, -0.0297, 0.0982, 0.169, 0.136, 0.2357, -0.1486, -0.2272, -0.2219, -0.0579, 0.0883
        };

        double[] conv2_weight_15 = new double[]
        {
        0.0429, 0.0607, 0.0444, -0.0771, 0.0444, -0.0122, 0.187, 0.2065, -0.0544, 0.0409, -0.1373, -0.0038, 0.1624, 0.101, -0.1041, -0.5065, -0.1958, -0.0676, -0.2449, -0.2982, -0.0123, 0.0011, -0.032, -0.0245, 0.0198, 0.132, 0.0745, -0.0347, 0.0444, -0.1984, -0.0211, -0.052, 0.1196, 0.1433, -0.1374, -0.1201, -0.0595, 0.0658, 0.1156, 0.0337, -0.2248, -0.231, 0.0332, -0.1474, -0.005, -0.2299, -0.0141, -0.0944, -0.1586, -0.0245, 0.0439, 0.0263, 0.0794, 0.0408, 0.1475, 0.0985, 0.1565, 0.1916, 0.1138, 0.056, -0.0028, 0.0346, 0.2365, 0.1275, -0.0663, -0.3228, -0.2493, -0.1795, -0.1424, -0.0037, -0.2962, -0.2498, -0.17, -0.1649, -0.1145, -0.039, -0.0281, -0.0753, 0.0471, 0.0031, 0.0979, 0.0906, 0.0337, 0.082, -0.0933, -0.3127, -0.1096, -0.0512, -0.1788, -0.1013, -0.1447, -0.3137, -0.2231, -0.1665, -0.1514, 0.2063, 0.1449, 0.0309, -0.1499, 0.082, -0.3952, -0.1916, -0.11, -0.1023, -0.1152, 0.0865, -0.312, -0.2385, -0.0932, -0.1552, 0.33, 0.2865, 0.1058, 0.163, 0.1777, 0.1487, 0.3542, 0.2537, 0.177, -0.0971, -0.3999, -0.3127, -0.2851, -0.3961, -0.3484, -0.1955, -0.008, -0.1073, -0.1881, -0.005, 0.2536, 0.4479, 0.2201, -0.0059, -0.0434, 0.0691, 0.0779, 0.1256, -0.0926, -0.0739, 0.0975, -0.016, -0.2368, -0.4608, -0.3746, -0.0184, 0.024, -0.0798, -0.2097, -0.0676
        };

        double[] conv2_bias = new double[]
        {
        0.0117, -0.1419, -0.0246, 0.1605, -0.151, -0.0916, -0.0532, -0.0218, 0.0484, -0.0304, -0.0488, -0.1262, -0.1399, -0.0506, -0.0766, -0.0564
        };
        double[] l4c0 = new double[100];
        double[] l4c1 = new double[100];
        double[] l4c2 = new double[100];
        double[] l4c3 = new double[100];
        double[] l4c4 = new double[100];
        double[] l4c5 = new double[100];
        double[] l4c6 = new double[100];
        double[] l4c7 = new double[100];
        double[] l4c8 = new double[100];
        double[] l4c9 = new double[100];
        double[] l4c10 = new double[100];
        double[] l4c11 = new double[100];
        double[] l4c12 = new double[100];
        double[] l4c13 = new double[100];
        double[] l4c14 = new double[100];
        double[] l4c15 = new double[100];
        for (int i = 2; i < 12; i++)
        {
            for (int j = 2; j < 12; j++)
            {
                int index = (i - 2) * 10 + (j - 2);
                int index_l3 = (i - 2) * 14 + (j - 2);
                l4c0[index] = Math.Max(
                    SumProduct(l3c0, conv2_weight_0, index_l3, 0, 5) +
                    SumProduct(l3c0, conv2_weight_0, index_l3 + 14, 5, 5) +
                    SumProduct(l3c0, conv2_weight_0, index_l3 + 2 * 14, 10, 5) +
                    SumProduct(l3c0, conv2_weight_0, index_l3 + 3 * 14, 15, 5) +
                    SumProduct(l3c0, conv2_weight_0, index_l3 + 4 * 14, 20, 5) +
                    SumProduct(l3c1, conv2_weight_0, index_l3, 25, 5) +
                    SumProduct(l3c1, conv2_weight_0, index_l3 + 14, 30, 5) +
                    SumProduct(l3c1, conv2_weight_0, index_l3 + 2 * 14, 35, 5) +
                    SumProduct(l3c1, conv2_weight_0, index_l3 + 3 * 14, 40, 5) +
                    SumProduct(l3c1, conv2_weight_0, index_l3 + 4 * 14, 45, 5) +
                    SumProduct(l3c2, conv2_weight_0, index_l3, 50, 5) +
                    SumProduct(l3c2, conv2_weight_0, index_l3 + 14, 55, 5) +
                    SumProduct(l3c2, conv2_weight_0, index_l3 + 2 * 14, 60, 5) +
                    SumProduct(l3c2, conv2_weight_0, index_l3 + 3 * 14, 65, 5) +
                    SumProduct(l3c2, conv2_weight_0, index_l3 + 4 * 14, 70, 5) +
                    SumProduct(l3c3, conv2_weight_0, index_l3, 75, 5) +
                    SumProduct(l3c3, conv2_weight_0, index_l3 + 14, 80, 5) +
                    SumProduct(l3c3, conv2_weight_0, index_l3 + 2 * 14, 85, 5) +
                    SumProduct(l3c3, conv2_weight_0, index_l3 + 3 * 14, 90, 5) +
                    SumProduct(l3c3, conv2_weight_0, index_l3 + 4 * 14, 95, 5) +
                    SumProduct(l3c4, conv2_weight_0, index_l3, 100, 5) +
                    SumProduct(l3c4, conv2_weight_0, index_l3 + 14, 105, 5) +
                    SumProduct(l3c4, conv2_weight_0, index_l3 + 2 * 14, 110, 5) +
                    SumProduct(l3c4, conv2_weight_0, index_l3 + 3 * 14, 115, 5) +
                    SumProduct(l3c4, conv2_weight_0, index_l3 + 4 * 14, 120, 5) +
                    SumProduct(l3c5, conv2_weight_0, index_l3, 125, 5) +
                    SumProduct(l3c5, conv2_weight_0, index_l3 + 14, 130, 5) +
                    SumProduct(l3c5, conv2_weight_0, index_l3 + 2 * 14, 135, 5) +
                    SumProduct(l3c5, conv2_weight_0, index_l3 + 3 * 14, 140, 5) +
                    SumProduct(l3c5, conv2_weight_0, index_l3 + 4 * 14, 145, 5) + conv2_bias[0], 0);
                l4c1[index] = Math.Max(
                    SumProduct(l3c0, conv2_weight_1, index_l3, 0, 5) +
                    SumProduct(l3c0, conv2_weight_1, index_l3 + 14, 5, 5) +
                    SumProduct(l3c0, conv2_weight_1, index_l3 + 2 * 14, 10, 5) +
                    SumProduct(l3c0, conv2_weight_1, index_l3 + 3 * 14, 15, 5) +
                    SumProduct(l3c0, conv2_weight_1, index_l3 + 4 * 14, 20, 5) +
                    SumProduct(l3c1, conv2_weight_1, index_l3, 25, 5) +
                    SumProduct(l3c1, conv2_weight_1, index_l3 + 14, 30, 5) +
                    SumProduct(l3c1, conv2_weight_1, index_l3 + 2 * 14, 35, 5) +
                    SumProduct(l3c1, conv2_weight_1, index_l3 + 3 * 14, 40, 5) +
                    SumProduct(l3c1, conv2_weight_1, index_l3 + 4 * 14, 45, 5) +
                    SumProduct(l3c2, conv2_weight_1, index_l3, 50, 5) +
                    SumProduct(l3c2, conv2_weight_1, index_l3 + 14, 55, 5) +
                    SumProduct(l3c2, conv2_weight_1, index_l3 + 2 * 14, 60, 5) +
                    SumProduct(l3c2, conv2_weight_1, index_l3 + 3 * 14, 65, 5) +
                    SumProduct(l3c2, conv2_weight_1, index_l3 + 4 * 14, 70, 5) +
                    SumProduct(l3c3, conv2_weight_1, index_l3, 75, 5) +
                    SumProduct(l3c3, conv2_weight_1, index_l3 + 14, 80, 5) +
                    SumProduct(l3c3, conv2_weight_1, index_l3 + 2 * 14, 85, 5) +
                    SumProduct(l3c3, conv2_weight_1, index_l3 + 3 * 14, 90, 5) +
                    SumProduct(l3c3, conv2_weight_1, index_l3 + 4 * 14, 95, 5) +
                    SumProduct(l3c4, conv2_weight_1, index_l3, 100, 5) +
                    SumProduct(l3c4, conv2_weight_1, index_l3 + 14, 105, 5) +
                    SumProduct(l3c4, conv2_weight_1, index_l3 + 2 * 14, 110, 5) +
                    SumProduct(l3c4, conv2_weight_1, index_l3 + 3 * 14, 115, 5) +
                    SumProduct(l3c4, conv2_weight_1, index_l3 + 4 * 14, 120, 5) +
                    SumProduct(l3c5, conv2_weight_1, index_l3, 125, 5) +
                    SumProduct(l3c5, conv2_weight_1, index_l3 + 14, 130, 5) +
                    SumProduct(l3c5, conv2_weight_1, index_l3 + 2 * 14, 135, 5) +
                    SumProduct(l3c5, conv2_weight_1, index_l3 + 3 * 14, 140, 5) +
                    SumProduct(l3c5, conv2_weight_1, index_l3 + 4 * 14, 145, 5) + conv2_bias[1], 0);
                l4c2[index] = Math.Max(
                    SumProduct(l3c0, conv2_weight_2, index_l3, 0, 5) +
                    SumProduct(l3c0, conv2_weight_2, index_l3 + 14, 5, 5) +
                    SumProduct(l3c0, conv2_weight_2, index_l3 + 2 * 14, 10, 5) +
                    SumProduct(l3c0, conv2_weight_2, index_l3 + 3 * 14, 15, 5) +
                    SumProduct(l3c0, conv2_weight_2, index_l3 + 4 * 14, 20, 5) +
                    SumProduct(l3c1, conv2_weight_2, index_l3, 25, 5) +
                    SumProduct(l3c1, conv2_weight_2, index_l3 + 14, 30, 5) +
                    SumProduct(l3c1, conv2_weight_2, index_l3 + 2 * 14, 35, 5) +
                    SumProduct(l3c1, conv2_weight_2, index_l3 + 3 * 14, 40, 5) +
                    SumProduct(l3c1, conv2_weight_2, index_l3 + 4 * 14, 45, 5) +
                    SumProduct(l3c2, conv2_weight_2, index_l3, 50, 5) +
                    SumProduct(l3c2, conv2_weight_2, index_l3 + 14, 55, 5) +
                    SumProduct(l3c2, conv2_weight_2, index_l3 + 2 * 14, 60, 5) +
                    SumProduct(l3c2, conv2_weight_2, index_l3 + 3 * 14, 65, 5) +
                    SumProduct(l3c2, conv2_weight_2, index_l3 + 4 * 14, 70, 5) +
                    SumProduct(l3c3, conv2_weight_2, index_l3, 75, 5) +
                    SumProduct(l3c3, conv2_weight_2, index_l3 + 14, 80, 5) +
                    SumProduct(l3c3, conv2_weight_2, index_l3 + 2 * 14, 85, 5) +
                    SumProduct(l3c3, conv2_weight_2, index_l3 + 3 * 14, 90, 5) +
                    SumProduct(l3c3, conv2_weight_2, index_l3 + 4 * 14, 95, 5) +
                    SumProduct(l3c4, conv2_weight_2, index_l3, 100, 5) +
                    SumProduct(l3c4, conv2_weight_2, index_l3 + 14, 105, 5) +
                    SumProduct(l3c4, conv2_weight_2, index_l3 + 2 * 14, 110, 5) +
                    SumProduct(l3c4, conv2_weight_2, index_l3 + 3 * 14, 115, 5) +
                    SumProduct(l3c4, conv2_weight_2, index_l3 + 4 * 14, 120, 5) +
                    SumProduct(l3c5, conv2_weight_2, index_l3, 125, 5) +
                    SumProduct(l3c5, conv2_weight_2, index_l3 + 14, 130, 5) +
                    SumProduct(l3c5, conv2_weight_2, index_l3 + 2 * 14, 135, 5) +
                    SumProduct(l3c5, conv2_weight_2, index_l3 + 3 * 14, 140, 5) +
                    SumProduct(l3c5, conv2_weight_2, index_l3 + 4 * 14, 145, 5) + conv2_bias[2], 0);
                l4c3[index] = Math.Max(
                    SumProduct(l3c0, conv2_weight_3, index_l3, 0, 5) +
                    SumProduct(l3c0, conv2_weight_3, index_l3 + 14, 5, 5) +
                    SumProduct(l3c0, conv2_weight_3, index_l3 + 2 * 14, 10, 5) +
                    SumProduct(l3c0, conv2_weight_3, index_l3 + 3 * 14, 15, 5) +
                    SumProduct(l3c0, conv2_weight_3, index_l3 + 4 * 14, 20, 5) +
                    SumProduct(l3c1, conv2_weight_3, index_l3, 25, 5) +
                    SumProduct(l3c1, conv2_weight_3, index_l3 + 14, 30, 5) +
                    SumProduct(l3c1, conv2_weight_3, index_l3 + 2 * 14, 35, 5) +
                    SumProduct(l3c1, conv2_weight_3, index_l3 + 3 * 14, 40, 5) +
                    SumProduct(l3c1, conv2_weight_3, index_l3 + 4 * 14, 45, 5) +
                    SumProduct(l3c2, conv2_weight_3, index_l3, 50, 5) +
                    SumProduct(l3c2, conv2_weight_3, index_l3 + 14, 55, 5) +
                    SumProduct(l3c2, conv2_weight_3, index_l3 + 2 * 14, 60, 5) +
                    SumProduct(l3c2, conv2_weight_3, index_l3 + 3 * 14, 65, 5) +
                    SumProduct(l3c2, conv2_weight_3, index_l3 + 4 * 14, 70, 5) +
                    SumProduct(l3c3, conv2_weight_3, index_l3, 75, 5) +
                    SumProduct(l3c3, conv2_weight_3, index_l3 + 14, 80, 5) +
                    SumProduct(l3c3, conv2_weight_3, index_l3 + 2 * 14, 85, 5) +
                    SumProduct(l3c3, conv2_weight_3, index_l3 + 3 * 14, 90, 5) +
                    SumProduct(l3c3, conv2_weight_3, index_l3 + 4 * 14, 95, 5) +
                    SumProduct(l3c4, conv2_weight_3, index_l3, 100, 5) +
                    SumProduct(l3c4, conv2_weight_3, index_l3 + 14, 105, 5) +
                    SumProduct(l3c4, conv2_weight_3, index_l3 + 2 * 14, 110, 5) +
                    SumProduct(l3c4, conv2_weight_3, index_l3 + 3 * 14, 115, 5) +
                    SumProduct(l3c4, conv2_weight_3, index_l3 + 4 * 14, 120, 5) +
                    SumProduct(l3c5, conv2_weight_3, index_l3, 125, 5) +
                    SumProduct(l3c5, conv2_weight_3, index_l3 + 14, 130, 5) +
                    SumProduct(l3c5, conv2_weight_3, index_l3 + 2 * 14, 135, 5) +
                    SumProduct(l3c5, conv2_weight_3, index_l3 + 3 * 14, 140, 5) +
                    SumProduct(l3c5, conv2_weight_3, index_l3 + 4 * 14, 145, 5) + conv2_bias[3], 0);
                l4c4[index] = Math.Max(
                    SumProduct(l3c0, conv2_weight_4, index_l3, 0, 5) +
                    SumProduct(l3c0, conv2_weight_4, index_l3 + 14, 5, 5) +
                    SumProduct(l3c0, conv2_weight_4, index_l3 + 2 * 14, 10, 5) +
                    SumProduct(l3c0, conv2_weight_4, index_l3 + 3 * 14, 15, 5) +
                    SumProduct(l3c0, conv2_weight_4, index_l3 + 4 * 14, 20, 5) +
                    SumProduct(l3c1, conv2_weight_4, index_l3, 25, 5) +
                    SumProduct(l3c1, conv2_weight_4, index_l3 + 14, 30, 5) +
                    SumProduct(l3c1, conv2_weight_4, index_l3 + 2 * 14, 35, 5) +
                    SumProduct(l3c1, conv2_weight_4, index_l3 + 3 * 14, 40, 5) +
                    SumProduct(l3c1, conv2_weight_4, index_l3 + 4 * 14, 45, 5) +
                    SumProduct(l3c2, conv2_weight_4, index_l3, 50, 5) +
                    SumProduct(l3c2, conv2_weight_4, index_l3 + 14, 55, 5) +
                    SumProduct(l3c2, conv2_weight_4, index_l3 + 2 * 14, 60, 5) +
                    SumProduct(l3c2, conv2_weight_4, index_l3 + 3 * 14, 65, 5) +
                    SumProduct(l3c2, conv2_weight_4, index_l3 + 4 * 14, 70, 5) +
                    SumProduct(l3c3, conv2_weight_4, index_l3, 75, 5) +
                    SumProduct(l3c3, conv2_weight_4, index_l3 + 14, 80, 5) +
                    SumProduct(l3c3, conv2_weight_4, index_l3 + 2 * 14, 85, 5) +
                    SumProduct(l3c3, conv2_weight_4, index_l3 + 3 * 14, 90, 5) +
                    SumProduct(l3c3, conv2_weight_4, index_l3 + 4 * 14, 95, 5) +
                    SumProduct(l3c4, conv2_weight_4, index_l3, 100, 5) +
                    SumProduct(l3c4, conv2_weight_4, index_l3 + 14, 105, 5) +
                    SumProduct(l3c4, conv2_weight_4, index_l3 + 2 * 14, 110, 5) +
                    SumProduct(l3c4, conv2_weight_4, index_l3 + 3 * 14, 115, 5) +
                    SumProduct(l3c4, conv2_weight_4, index_l3 + 4 * 14, 120, 5) +
                    SumProduct(l3c5, conv2_weight_4, index_l3, 125, 5) +
                    SumProduct(l3c5, conv2_weight_4, index_l3 + 14, 130, 5) +
                    SumProduct(l3c5, conv2_weight_4, index_l3 + 2 * 14, 135, 5) +
                    SumProduct(l3c5, conv2_weight_4, index_l3 + 3 * 14, 140, 5) +
                    SumProduct(l3c5, conv2_weight_4, index_l3 + 4 * 14, 145, 5) + conv2_bias[4], 0);
                l4c5[index] = Math.Max(
                    SumProduct(l3c0, conv2_weight_5, index_l3, 0, 5) +
                    SumProduct(l3c0, conv2_weight_5, index_l3 + 14, 5, 5) +
                    SumProduct(l3c0, conv2_weight_5, index_l3 + 2 * 14, 10, 5) +
                    SumProduct(l3c0, conv2_weight_5, index_l3 + 3 * 14, 15, 5) +
                    SumProduct(l3c0, conv2_weight_5, index_l3 + 4 * 14, 20, 5) +
                    SumProduct(l3c1, conv2_weight_5, index_l3, 25, 5) +
                    SumProduct(l3c1, conv2_weight_5, index_l3 + 14, 30, 5) +
                    SumProduct(l3c1, conv2_weight_5, index_l3 + 2 * 14, 35, 5) +
                    SumProduct(l3c1, conv2_weight_5, index_l3 + 3 * 14, 40, 5) +
                    SumProduct(l3c1, conv2_weight_5, index_l3 + 4 * 14, 45, 5) +
                    SumProduct(l3c2, conv2_weight_5, index_l3, 50, 5) +
                    SumProduct(l3c2, conv2_weight_5, index_l3 + 14, 55, 5) +
                    SumProduct(l3c2, conv2_weight_5, index_l3 + 2 * 14, 60, 5) +
                    SumProduct(l3c2, conv2_weight_5, index_l3 + 3 * 14, 65, 5) +
                    SumProduct(l3c2, conv2_weight_5, index_l3 + 4 * 14, 70, 5) +
                    SumProduct(l3c3, conv2_weight_5, index_l3, 75, 5) +
                    SumProduct(l3c3, conv2_weight_5, index_l3 + 14, 80, 5) +
                    SumProduct(l3c3, conv2_weight_5, index_l3 + 2 * 14, 85, 5) +
                    SumProduct(l3c3, conv2_weight_5, index_l3 + 3 * 14, 90, 5) +
                    SumProduct(l3c3, conv2_weight_5, index_l3 + 4 * 14, 95, 5) +
                    SumProduct(l3c4, conv2_weight_5, index_l3, 100, 5) +
                    SumProduct(l3c4, conv2_weight_5, index_l3 + 14, 105, 5) +
                    SumProduct(l3c4, conv2_weight_5, index_l3 + 2 * 14, 110, 5) +
                    SumProduct(l3c4, conv2_weight_5, index_l3 + 3 * 14, 115, 5) +
                    SumProduct(l3c4, conv2_weight_5, index_l3 + 4 * 14, 120, 5) +
                    SumProduct(l3c5, conv2_weight_5, index_l3, 125, 5) +
                    SumProduct(l3c5, conv2_weight_5, index_l3 + 14, 130, 5) +
                    SumProduct(l3c5, conv2_weight_5, index_l3 + 2 * 14, 135, 5) +
                    SumProduct(l3c5, conv2_weight_5, index_l3 + 3 * 14, 140, 5) +
                    SumProduct(l3c5, conv2_weight_5, index_l3 + 4 * 14, 145, 5) + conv2_bias[5], 0);
                l4c6[index] = Math.Max(
                    SumProduct(l3c0, conv2_weight_6, index_l3, 0, 5) +
                    SumProduct(l3c0, conv2_weight_6, index_l3 + 14, 5, 5) +
                    SumProduct(l3c0, conv2_weight_6, index_l3 + 2 * 14, 10, 5) +
                    SumProduct(l3c0, conv2_weight_6, index_l3 + 3 * 14, 15, 5) +
                    SumProduct(l3c0, conv2_weight_6, index_l3 + 4 * 14, 20, 5) +
                    SumProduct(l3c1, conv2_weight_6, index_l3, 25, 5) +
                    SumProduct(l3c1, conv2_weight_6, index_l3 + 14, 30, 5) +
                    SumProduct(l3c1, conv2_weight_6, index_l3 + 2 * 14, 35, 5) +
                    SumProduct(l3c1, conv2_weight_6, index_l3 + 3 * 14, 40, 5) +
                    SumProduct(l3c1, conv2_weight_6, index_l3 + 4 * 14, 45, 5) +
                    SumProduct(l3c2, conv2_weight_6, index_l3, 50, 5) +
                    SumProduct(l3c2, conv2_weight_6, index_l3 + 14, 55, 5) +
                    SumProduct(l3c2, conv2_weight_6, index_l3 + 2 * 14, 60, 5) +
                    SumProduct(l3c2, conv2_weight_6, index_l3 + 3 * 14, 65, 5) +
                    SumProduct(l3c2, conv2_weight_6, index_l3 + 4 * 14, 70, 5) +
                    SumProduct(l3c3, conv2_weight_6, index_l3, 75, 5) +
                    SumProduct(l3c3, conv2_weight_6, index_l3 + 14, 80, 5) +
                    SumProduct(l3c3, conv2_weight_6, index_l3 + 2 * 14, 85, 5) +
                    SumProduct(l3c3, conv2_weight_6, index_l3 + 3 * 14, 90, 5) +
                    SumProduct(l3c3, conv2_weight_6, index_l3 + 4 * 14, 95, 5) +
                    SumProduct(l3c4, conv2_weight_6, index_l3, 100, 5) +
                    SumProduct(l3c4, conv2_weight_6, index_l3 + 14, 105, 5) +
                    SumProduct(l3c4, conv2_weight_6, index_l3 + 2 * 14, 110, 5) +
                    SumProduct(l3c4, conv2_weight_6, index_l3 + 3 * 14, 115, 5) +
                    SumProduct(l3c4, conv2_weight_6, index_l3 + 4 * 14, 120, 5) +
                    SumProduct(l3c5, conv2_weight_6, index_l3, 125, 5) +
                    SumProduct(l3c5, conv2_weight_6, index_l3 + 14, 130, 5) +
                    SumProduct(l3c5, conv2_weight_6, index_l3 + 2 * 14, 135, 5) +
                    SumProduct(l3c5, conv2_weight_6, index_l3 + 3 * 14, 140, 5) +
                    SumProduct(l3c5, conv2_weight_6, index_l3 + 4 * 14, 145, 5) + conv2_bias[6], 0);
                l4c7[index] = Math.Max(
                    SumProduct(l3c0, conv2_weight_7, index_l3, 0, 5) +
                    SumProduct(l3c0, conv2_weight_7, index_l3 + 14, 5, 5) +
                    SumProduct(l3c0, conv2_weight_7, index_l3 + 2 * 14, 10, 5) +
                    SumProduct(l3c0, conv2_weight_7, index_l3 + 3 * 14, 15, 5) +
                    SumProduct(l3c0, conv2_weight_7, index_l3 + 4 * 14, 20, 5) +
                    SumProduct(l3c1, conv2_weight_7, index_l3, 25, 5) +
                    SumProduct(l3c1, conv2_weight_7, index_l3 + 14, 30, 5) +
                    SumProduct(l3c1, conv2_weight_7, index_l3 + 2 * 14, 35, 5) +
                    SumProduct(l3c1, conv2_weight_7, index_l3 + 3 * 14, 40, 5) +
                    SumProduct(l3c1, conv2_weight_7, index_l3 + 4 * 14, 45, 5) +
                    SumProduct(l3c2, conv2_weight_7, index_l3, 50, 5) +
                    SumProduct(l3c2, conv2_weight_7, index_l3 + 14, 55, 5) +
                    SumProduct(l3c2, conv2_weight_7, index_l3 + 2 * 14, 60, 5) +
                    SumProduct(l3c2, conv2_weight_7, index_l3 + 3 * 14, 65, 5) +
                    SumProduct(l3c2, conv2_weight_7, index_l3 + 4 * 14, 70, 5) +
                    SumProduct(l3c3, conv2_weight_7, index_l3, 75, 5) +
                    SumProduct(l3c3, conv2_weight_7, index_l3 + 14, 80, 5) +
                    SumProduct(l3c3, conv2_weight_7, index_l3 + 2 * 14, 85, 5) +
                    SumProduct(l3c3, conv2_weight_7, index_l3 + 3 * 14, 90, 5) +
                    SumProduct(l3c3, conv2_weight_7, index_l3 + 4 * 14, 95, 5) +
                    SumProduct(l3c4, conv2_weight_7, index_l3, 100, 5) +
                    SumProduct(l3c4, conv2_weight_7, index_l3 + 14, 105, 5) +
                    SumProduct(l3c4, conv2_weight_7, index_l3 + 2 * 14, 110, 5) +
                    SumProduct(l3c4, conv2_weight_7, index_l3 + 3 * 14, 115, 5) +
                    SumProduct(l3c4, conv2_weight_7, index_l3 + 4 * 14, 120, 5) +
                    SumProduct(l3c5, conv2_weight_7, index_l3, 125, 5) +
                    SumProduct(l3c5, conv2_weight_7, index_l3 + 14, 130, 5) +
                    SumProduct(l3c5, conv2_weight_7, index_l3 + 2 * 14, 135, 5) +
                    SumProduct(l3c5, conv2_weight_7, index_l3 + 3 * 14, 140, 5) +
                    SumProduct(l3c5, conv2_weight_7, index_l3 + 4 * 14, 145, 5) + conv2_bias[7], 0);
                l4c8[index] = Math.Max(
                    SumProduct(l3c0, conv2_weight_8, index_l3, 0, 5) +
                    SumProduct(l3c0, conv2_weight_8, index_l3 + 14, 5, 5) +
                    SumProduct(l3c0, conv2_weight_8, index_l3 + 2 * 14, 10, 5) +
                    SumProduct(l3c0, conv2_weight_8, index_l3 + 3 * 14, 15, 5) +
                    SumProduct(l3c0, conv2_weight_8, index_l3 + 4 * 14, 20, 5) +
                    SumProduct(l3c1, conv2_weight_8, index_l3, 25, 5) +
                    SumProduct(l3c1, conv2_weight_8, index_l3 + 14, 30, 5) +
                    SumProduct(l3c1, conv2_weight_8, index_l3 + 2 * 14, 35, 5) +
                    SumProduct(l3c1, conv2_weight_8, index_l3 + 3 * 14, 40, 5) +
                    SumProduct(l3c1, conv2_weight_8, index_l3 + 4 * 14, 45, 5) +
                    SumProduct(l3c2, conv2_weight_8, index_l3, 50, 5) +
                    SumProduct(l3c2, conv2_weight_8, index_l3 + 14, 55, 5) +
                    SumProduct(l3c2, conv2_weight_8, index_l3 + 2 * 14, 60, 5) +
                    SumProduct(l3c2, conv2_weight_8, index_l3 + 3 * 14, 65, 5) +
                    SumProduct(l3c2, conv2_weight_8, index_l3 + 4 * 14, 70, 5) +
                    SumProduct(l3c3, conv2_weight_8, index_l3, 75, 5) +
                    SumProduct(l3c3, conv2_weight_8, index_l3 + 14, 80, 5) +
                    SumProduct(l3c3, conv2_weight_8, index_l3 + 2 * 14, 85, 5) +
                    SumProduct(l3c3, conv2_weight_8, index_l3 + 3 * 14, 90, 5) +
                    SumProduct(l3c3, conv2_weight_8, index_l3 + 4 * 14, 95, 5) +
                    SumProduct(l3c4, conv2_weight_8, index_l3, 100, 5) +
                    SumProduct(l3c4, conv2_weight_8, index_l3 + 14, 105, 5) +
                    SumProduct(l3c4, conv2_weight_8, index_l3 + 2 * 14, 110, 5) +
                    SumProduct(l3c4, conv2_weight_8, index_l3 + 3 * 14, 115, 5) +
                    SumProduct(l3c4, conv2_weight_8, index_l3 + 4 * 14, 120, 5) +
                    SumProduct(l3c5, conv2_weight_8, index_l3, 125, 5) +
                    SumProduct(l3c5, conv2_weight_8, index_l3 + 14, 130, 5) +
                    SumProduct(l3c5, conv2_weight_8, index_l3 + 2 * 14, 135, 5) +
                    SumProduct(l3c5, conv2_weight_8, index_l3 + 3 * 14, 140, 5) +
                    SumProduct(l3c5, conv2_weight_8, index_l3 + 4 * 14, 145, 5) + conv2_bias[8], 0);
                l4c9[index] = Math.Max(
                    SumProduct(l3c0, conv2_weight_9, index_l3, 0, 5) +
                    SumProduct(l3c0, conv2_weight_9, index_l3 + 14, 5, 5) +
                    SumProduct(l3c0, conv2_weight_9, index_l3 + 2 * 14, 10, 5) +
                    SumProduct(l3c0, conv2_weight_9, index_l3 + 3 * 14, 15, 5) +
                    SumProduct(l3c0, conv2_weight_9, index_l3 + 4 * 14, 20, 5) +
                    SumProduct(l3c1, conv2_weight_9, index_l3, 25, 5) +
                    SumProduct(l3c1, conv2_weight_9, index_l3 + 14, 30, 5) +
                    SumProduct(l3c1, conv2_weight_9, index_l3 + 2 * 14, 35, 5) +
                    SumProduct(l3c1, conv2_weight_9, index_l3 + 3 * 14, 40, 5) +
                    SumProduct(l3c1, conv2_weight_9, index_l3 + 4 * 14, 45, 5) +
                    SumProduct(l3c2, conv2_weight_9, index_l3, 50, 5) +
                    SumProduct(l3c2, conv2_weight_9, index_l3 + 14, 55, 5) +
                    SumProduct(l3c2, conv2_weight_9, index_l3 + 2 * 14, 60, 5) +
                    SumProduct(l3c2, conv2_weight_9, index_l3 + 3 * 14, 65, 5) +
                    SumProduct(l3c2, conv2_weight_9, index_l3 + 4 * 14, 70, 5) +
                    SumProduct(l3c3, conv2_weight_9, index_l3, 75, 5) +
                    SumProduct(l3c3, conv2_weight_9, index_l3 + 14, 80, 5) +
                    SumProduct(l3c3, conv2_weight_9, index_l3 + 2 * 14, 85, 5) +
                    SumProduct(l3c3, conv2_weight_9, index_l3 + 3 * 14, 90, 5) +
                    SumProduct(l3c3, conv2_weight_9, index_l3 + 4 * 14, 95, 5) +
                    SumProduct(l3c4, conv2_weight_9, index_l3, 100, 5) +
                    SumProduct(l3c4, conv2_weight_9, index_l3 + 14, 105, 5) +
                    SumProduct(l3c4, conv2_weight_9, index_l3 + 2 * 14, 110, 5) +
                    SumProduct(l3c4, conv2_weight_9, index_l3 + 3 * 14, 115, 5) +
                    SumProduct(l3c4, conv2_weight_9, index_l3 + 4 * 14, 120, 5) +
                    SumProduct(l3c5, conv2_weight_9, index_l3, 125, 5) +
                    SumProduct(l3c5, conv2_weight_9, index_l3 + 14, 130, 5) +
                    SumProduct(l3c5, conv2_weight_9, index_l3 + 2 * 14, 135, 5) +
                    SumProduct(l3c5, conv2_weight_9, index_l3 + 3 * 14, 140, 5) +
                    SumProduct(l3c5, conv2_weight_9, index_l3 + 4 * 14, 145, 5) + conv2_bias[9], 0);
                l4c10[index] = Math.Max(
                    SumProduct(l3c0, conv2_weight_10, index_l3, 0, 5) +
                    SumProduct(l3c0, conv2_weight_10, index_l3 + 14, 5, 5) +
                    SumProduct(l3c0, conv2_weight_10, index_l3 + 2 * 14, 10, 5) +
                    SumProduct(l3c0, conv2_weight_10, index_l3 + 3 * 14, 15, 5) +
                    SumProduct(l3c0, conv2_weight_10, index_l3 + 4 * 14, 20, 5) +
                    SumProduct(l3c1, conv2_weight_10, index_l3, 25, 5) +
                    SumProduct(l3c1, conv2_weight_10, index_l3 + 14, 30, 5) +
                    SumProduct(l3c1, conv2_weight_10, index_l3 + 2 * 14, 35, 5) +
                    SumProduct(l3c1, conv2_weight_10, index_l3 + 3 * 14, 40, 5) +
                    SumProduct(l3c1, conv2_weight_10, index_l3 + 4 * 14, 45, 5) +
                    SumProduct(l3c2, conv2_weight_10, index_l3, 50, 5) +
                    SumProduct(l3c2, conv2_weight_10, index_l3 + 14, 55, 5) +
                    SumProduct(l3c2, conv2_weight_10, index_l3 + 2 * 14, 60, 5) +
                    SumProduct(l3c2, conv2_weight_10, index_l3 + 3 * 14, 65, 5) +
                    SumProduct(l3c2, conv2_weight_10, index_l3 + 4 * 14, 70, 5) +
                    SumProduct(l3c3, conv2_weight_10, index_l3, 75, 5) +
                    SumProduct(l3c3, conv2_weight_10, index_l3 + 14, 80, 5) +
                    SumProduct(l3c3, conv2_weight_10, index_l3 + 2 * 14, 85, 5) +
                    SumProduct(l3c3, conv2_weight_10, index_l3 + 3 * 14, 90, 5) +
                    SumProduct(l3c3, conv2_weight_10, index_l3 + 4 * 14, 95, 5) +
                    SumProduct(l3c4, conv2_weight_10, index_l3, 100, 5) +
                    SumProduct(l3c4, conv2_weight_10, index_l3 + 14, 105, 5) +
                    SumProduct(l3c4, conv2_weight_10, index_l3 + 2 * 14, 110, 5) +
                    SumProduct(l3c4, conv2_weight_10, index_l3 + 3 * 14, 115, 5) +
                    SumProduct(l3c4, conv2_weight_10, index_l3 + 4 * 14, 120, 5) +
                    SumProduct(l3c5, conv2_weight_10, index_l3, 125, 5) +
                    SumProduct(l3c5, conv2_weight_10, index_l3 + 14, 130, 5) +
                    SumProduct(l3c5, conv2_weight_10, index_l3 + 2 * 14, 135, 5) +
                    SumProduct(l3c5, conv2_weight_10, index_l3 + 3 * 14, 140, 5) +
                    SumProduct(l3c5, conv2_weight_10, index_l3 + 4 * 14, 145, 5) + conv2_bias[10], 0);
                l4c11[index] = Math.Max(
                    SumProduct(l3c0, conv2_weight_11, index_l3, 0, 5) +
                    SumProduct(l3c0, conv2_weight_11, index_l3 + 14, 5, 5) +
                    SumProduct(l3c0, conv2_weight_11, index_l3 + 2 * 14, 10, 5) +
                    SumProduct(l3c0, conv2_weight_11, index_l3 + 3 * 14, 15, 5) +
                    SumProduct(l3c0, conv2_weight_11, index_l3 + 4 * 14, 20, 5) +
                    SumProduct(l3c1, conv2_weight_11, index_l3, 25, 5) +
                    SumProduct(l3c1, conv2_weight_11, index_l3 + 14, 30, 5) +
                    SumProduct(l3c1, conv2_weight_11, index_l3 + 2 * 14, 35, 5) +
                    SumProduct(l3c1, conv2_weight_11, index_l3 + 3 * 14, 40, 5) +
                    SumProduct(l3c1, conv2_weight_11, index_l3 + 4 * 14, 45, 5) +
                    SumProduct(l3c2, conv2_weight_11, index_l3, 50, 5) +
                    SumProduct(l3c2, conv2_weight_11, index_l3 + 14, 55, 5) +
                    SumProduct(l3c2, conv2_weight_11, index_l3 + 2 * 14, 60, 5) +
                    SumProduct(l3c2, conv2_weight_11, index_l3 + 3 * 14, 65, 5) +
                    SumProduct(l3c2, conv2_weight_11, index_l3 + 4 * 14, 70, 5) +
                    SumProduct(l3c3, conv2_weight_11, index_l3, 75, 5) +
                    SumProduct(l3c3, conv2_weight_11, index_l3 + 14, 80, 5) +
                    SumProduct(l3c3, conv2_weight_11, index_l3 + 2 * 14, 85, 5) +
                    SumProduct(l3c3, conv2_weight_11, index_l3 + 3 * 14, 90, 5) +
                    SumProduct(l3c3, conv2_weight_11, index_l3 + 4 * 14, 95, 5) +
                    SumProduct(l3c4, conv2_weight_11, index_l3, 100, 5) +
                    SumProduct(l3c4, conv2_weight_11, index_l3 + 14, 105, 5) +
                    SumProduct(l3c4, conv2_weight_11, index_l3 + 2 * 14, 110, 5) +
                    SumProduct(l3c4, conv2_weight_11, index_l3 + 3 * 14, 115, 5) +
                    SumProduct(l3c4, conv2_weight_11, index_l3 + 4 * 14, 120, 5) +
                    SumProduct(l3c5, conv2_weight_11, index_l3, 125, 5) +
                    SumProduct(l3c5, conv2_weight_11, index_l3 + 14, 130, 5) +
                    SumProduct(l3c5, conv2_weight_11, index_l3 + 2 * 14, 135, 5) +
                    SumProduct(l3c5, conv2_weight_11, index_l3 + 3 * 14, 140, 5) +
                    SumProduct(l3c5, conv2_weight_11, index_l3 + 4 * 14, 145, 5) + conv2_bias[11], 0);
                l4c12[index] = Math.Max(
                    SumProduct(l3c0, conv2_weight_12, index_l3, 0, 5) +
                    SumProduct(l3c0, conv2_weight_12, index_l3 + 14, 5, 5) +
                    SumProduct(l3c0, conv2_weight_12, index_l3 + 2 * 14, 10, 5) +
                    SumProduct(l3c0, conv2_weight_12, index_l3 + 3 * 14, 15, 5) +
                    SumProduct(l3c0, conv2_weight_12, index_l3 + 4 * 14, 20, 5) +
                    SumProduct(l3c1, conv2_weight_12, index_l3, 25, 5) +
                    SumProduct(l3c1, conv2_weight_12, index_l3 + 14, 30, 5) +
                    SumProduct(l3c1, conv2_weight_12, index_l3 + 2 * 14, 35, 5) +
                    SumProduct(l3c1, conv2_weight_12, index_l3 + 3 * 14, 40, 5) +
                    SumProduct(l3c1, conv2_weight_12, index_l3 + 4 * 14, 45, 5) +
                    SumProduct(l3c2, conv2_weight_12, index_l3, 50, 5) +
                    SumProduct(l3c2, conv2_weight_12, index_l3 + 14, 55, 5) +
                    SumProduct(l3c2, conv2_weight_12, index_l3 + 2 * 14, 60, 5) +
                    SumProduct(l3c2, conv2_weight_12, index_l3 + 3 * 14, 65, 5) +
                    SumProduct(l3c2, conv2_weight_12, index_l3 + 4 * 14, 70, 5) +
                    SumProduct(l3c3, conv2_weight_12, index_l3, 75, 5) +
                    SumProduct(l3c3, conv2_weight_12, index_l3 + 14, 80, 5) +
                    SumProduct(l3c3, conv2_weight_12, index_l3 + 2 * 14, 85, 5) +
                    SumProduct(l3c3, conv2_weight_12, index_l3 + 3 * 14, 90, 5) +
                    SumProduct(l3c3, conv2_weight_12, index_l3 + 4 * 14, 95, 5) +
                    SumProduct(l3c4, conv2_weight_12, index_l3, 100, 5) +
                    SumProduct(l3c4, conv2_weight_12, index_l3 + 14, 105, 5) +
                    SumProduct(l3c4, conv2_weight_12, index_l3 + 2 * 14, 110, 5) +
                    SumProduct(l3c4, conv2_weight_12, index_l3 + 3 * 14, 115, 5) +
                    SumProduct(l3c4, conv2_weight_12, index_l3 + 4 * 14, 120, 5) +
                    SumProduct(l3c5, conv2_weight_12, index_l3, 125, 5) +
                    SumProduct(l3c5, conv2_weight_12, index_l3 + 14, 130, 5) +
                    SumProduct(l3c5, conv2_weight_12, index_l3 + 2 * 14, 135, 5) +
                    SumProduct(l3c5, conv2_weight_12, index_l3 + 3 * 14, 140, 5) +
                    SumProduct(l3c5, conv2_weight_12, index_l3 + 4 * 14, 145, 5) + conv2_bias[12], 0);
                l4c13[index] = Math.Max(
                    SumProduct(l3c0, conv2_weight_13, index_l3, 0, 5) +
                    SumProduct(l3c0, conv2_weight_13, index_l3 + 14, 5, 5) +
                    SumProduct(l3c0, conv2_weight_13, index_l3 + 2 * 14, 10, 5) +
                    SumProduct(l3c0, conv2_weight_13, index_l3 + 3 * 14, 15, 5) +
                    SumProduct(l3c0, conv2_weight_13, index_l3 + 4 * 14, 20, 5) +
                    SumProduct(l3c1, conv2_weight_13, index_l3, 25, 5) +
                    SumProduct(l3c1, conv2_weight_13, index_l3 + 14, 30, 5) +
                    SumProduct(l3c1, conv2_weight_13, index_l3 + 2 * 14, 35, 5) +
                    SumProduct(l3c1, conv2_weight_13, index_l3 + 3 * 14, 40, 5) +
                    SumProduct(l3c1, conv2_weight_13, index_l3 + 4 * 14, 45, 5) +
                    SumProduct(l3c2, conv2_weight_13, index_l3, 50, 5) +
                    SumProduct(l3c2, conv2_weight_13, index_l3 + 14, 55, 5) +
                    SumProduct(l3c2, conv2_weight_13, index_l3 + 2 * 14, 60, 5) +
                    SumProduct(l3c2, conv2_weight_13, index_l3 + 3 * 14, 65, 5) +
                    SumProduct(l3c2, conv2_weight_13, index_l3 + 4 * 14, 70, 5) +
                    SumProduct(l3c3, conv2_weight_13, index_l3, 75, 5) +
                    SumProduct(l3c3, conv2_weight_13, index_l3 + 14, 80, 5) +
                    SumProduct(l3c3, conv2_weight_13, index_l3 + 2 * 14, 85, 5) +
                    SumProduct(l3c3, conv2_weight_13, index_l3 + 3 * 14, 90, 5) +
                    SumProduct(l3c3, conv2_weight_13, index_l3 + 4 * 14, 95, 5) +
                    SumProduct(l3c4, conv2_weight_13, index_l3, 100, 5) +
                    SumProduct(l3c4, conv2_weight_13, index_l3 + 14, 105, 5) +
                    SumProduct(l3c4, conv2_weight_13, index_l3 + 2 * 14, 110, 5) +
                    SumProduct(l3c4, conv2_weight_13, index_l3 + 3 * 14, 115, 5) +
                    SumProduct(l3c4, conv2_weight_13, index_l3 + 4 * 14, 120, 5) +
                    SumProduct(l3c5, conv2_weight_13, index_l3, 125, 5) +
                    SumProduct(l3c5, conv2_weight_13, index_l3 + 14, 130, 5) +
                    SumProduct(l3c5, conv2_weight_13, index_l3 + 2 * 14, 135, 5) +
                    SumProduct(l3c5, conv2_weight_13, index_l3 + 3 * 14, 140, 5) +
                    SumProduct(l3c5, conv2_weight_13, index_l3 + 4 * 14, 145, 5) + conv2_bias[13], 0);
                l4c14[index] = Math.Max(
                    SumProduct(l3c0, conv2_weight_14, index_l3, 0, 5) +
                    SumProduct(l3c0, conv2_weight_14, index_l3 + 14, 5, 5) +
                    SumProduct(l3c0, conv2_weight_14, index_l3 + 2 * 14, 10, 5) +
                    SumProduct(l3c0, conv2_weight_14, index_l3 + 3 * 14, 15, 5) +
                    SumProduct(l3c0, conv2_weight_14, index_l3 + 4 * 14, 20, 5) +
                    SumProduct(l3c1, conv2_weight_14, index_l3, 25, 5) +
                    SumProduct(l3c1, conv2_weight_14, index_l3 + 14, 30, 5) +
                    SumProduct(l3c1, conv2_weight_14, index_l3 + 2 * 14, 35, 5) +
                    SumProduct(l3c1, conv2_weight_14, index_l3 + 3 * 14, 40, 5) +
                    SumProduct(l3c1, conv2_weight_14, index_l3 + 4 * 14, 45, 5) +
                    SumProduct(l3c2, conv2_weight_14, index_l3, 50, 5) +
                    SumProduct(l3c2, conv2_weight_14, index_l3 + 14, 55, 5) +
                    SumProduct(l3c2, conv2_weight_14, index_l3 + 2 * 14, 60, 5) +
                    SumProduct(l3c2, conv2_weight_14, index_l3 + 3 * 14, 65, 5) +
                    SumProduct(l3c2, conv2_weight_14, index_l3 + 4 * 14, 70, 5) +
                    SumProduct(l3c3, conv2_weight_14, index_l3, 75, 5) +
                    SumProduct(l3c3, conv2_weight_14, index_l3 + 14, 80, 5) +
                    SumProduct(l3c3, conv2_weight_14, index_l3 + 2 * 14, 85, 5) +
                    SumProduct(l3c3, conv2_weight_14, index_l3 + 3 * 14, 90, 5) +
                    SumProduct(l3c3, conv2_weight_14, index_l3 + 4 * 14, 95, 5) +
                    SumProduct(l3c4, conv2_weight_14, index_l3, 100, 5) +
                    SumProduct(l3c4, conv2_weight_14, index_l3 + 14, 105, 5) +
                    SumProduct(l3c4, conv2_weight_14, index_l3 + 2 * 14, 110, 5) +
                    SumProduct(l3c4, conv2_weight_14, index_l3 + 3 * 14, 115, 5) +
                    SumProduct(l3c4, conv2_weight_14, index_l3 + 4 * 14, 120, 5) +
                    SumProduct(l3c5, conv2_weight_14, index_l3, 125, 5) +
                    SumProduct(l3c5, conv2_weight_14, index_l3 + 14, 130, 5) +
                    SumProduct(l3c5, conv2_weight_14, index_l3 + 2 * 14, 135, 5) +
                    SumProduct(l3c5, conv2_weight_14, index_l3 + 3 * 14, 140, 5) +
                    SumProduct(l3c5, conv2_weight_14, index_l3 + 4 * 14, 145, 5) + conv2_bias[14], 0);
                l4c15[index] = Math.Max(
                    SumProduct(l3c0, conv2_weight_15, index_l3, 0, 5) +
                    SumProduct(l3c0, conv2_weight_15, index_l3 + 14, 5, 5) +
                    SumProduct(l3c0, conv2_weight_15, index_l3 + 2 * 14, 10, 5) +
                    SumProduct(l3c0, conv2_weight_15, index_l3 + 3 * 14, 15, 5) +
                    SumProduct(l3c0, conv2_weight_15, index_l3 + 4 * 14, 20, 5) +
                    SumProduct(l3c1, conv2_weight_15, index_l3, 25, 5) +
                    SumProduct(l3c1, conv2_weight_15, index_l3 + 14, 30, 5) +
                    SumProduct(l3c1, conv2_weight_15, index_l3 + 2 * 14, 35, 5) +
                    SumProduct(l3c1, conv2_weight_15, index_l3 + 3 * 14, 40, 5) +
                    SumProduct(l3c1, conv2_weight_15, index_l3 + 4 * 14, 45, 5) +
                    SumProduct(l3c2, conv2_weight_15, index_l3, 50, 5) +
                    SumProduct(l3c2, conv2_weight_15, index_l3 + 14, 55, 5) +
                    SumProduct(l3c2, conv2_weight_15, index_l3 + 2 * 14, 60, 5) +
                    SumProduct(l3c2, conv2_weight_15, index_l3 + 3 * 14, 65, 5) +
                    SumProduct(l3c2, conv2_weight_15, index_l3 + 4 * 14, 70, 5) +
                    SumProduct(l3c3, conv2_weight_15, index_l3, 75, 5) +
                    SumProduct(l3c3, conv2_weight_15, index_l3 + 14, 80, 5) +
                    SumProduct(l3c3, conv2_weight_15, index_l3 + 2 * 14, 85, 5) +
                    SumProduct(l3c3, conv2_weight_15, index_l3 + 3 * 14, 90, 5) +
                    SumProduct(l3c3, conv2_weight_15, index_l3 + 4 * 14, 95, 5) +
                    SumProduct(l3c4, conv2_weight_15, index_l3, 100, 5) +
                    SumProduct(l3c4, conv2_weight_15, index_l3 + 14, 105, 5) +
                    SumProduct(l3c4, conv2_weight_15, index_l3 + 2 * 14, 110, 5) +
                    SumProduct(l3c4, conv2_weight_15, index_l3 + 3 * 14, 115, 5) +
                    SumProduct(l3c4, conv2_weight_15, index_l3 + 4 * 14, 120, 5) +
                    SumProduct(l3c5, conv2_weight_15, index_l3, 125, 5) +
                    SumProduct(l3c5, conv2_weight_15, index_l3 + 14, 130, 5) +
                    SumProduct(l3c5, conv2_weight_15, index_l3 + 2 * 14, 135, 5) +
                    SumProduct(l3c5, conv2_weight_15, index_l3 + 3 * 14, 140, 5) +
                    SumProduct(l3c5, conv2_weight_15, index_l3 + 4 * 14, 145, 5) + conv2_bias[15], 0);
            }
        }


        // Second maxpool (forth layer to fifth layer) 
        double[] l5c0 = new double[25];
        double[] l5c1 = new double[25];
        double[] l5c2 = new double[25];
        double[] l5c3 = new double[25];
        double[] l5c4 = new double[25];
        double[] l5c5 = new double[25];
        double[] l5c6 = new double[25];
        double[] l5c7 = new double[25];
        double[] l5c8 = new double[25];
        double[] l5c9 = new double[25];
        double[] l5c10 = new double[25];
        double[] l5c11 = new double[25];
        double[] l5c12 = new double[25];
        double[] l5c13 = new double[25];
        double[] l5c14 = new double[25];
        double[] l5c15 = new double[25];
        ind_i = 0;
        ind_j = 0;
        for (int i = 0; i < 10; i += 2)
        {
            for (int j = 0; j < 10; j += 2)
            {
                l5c0[ind_i * 5 + ind_j] = Math.Max(l4c0[i * 10 + j], Math.Max(l4c0[i * 10 + j + 1], Math.Max(l4c0[(i + 1) * 10 + j], l4c0[(i + 1) * 10 + j + 1])));
                l5c1[ind_i * 5 + ind_j] = Math.Max(l4c1[i * 10 + j], Math.Max(l4c1[i * 10 + j + 1], Math.Max(l4c1[(i + 1) * 10 + j], l4c1[(i + 1) * 10 + j + 1])));
                l5c2[ind_i * 5 + ind_j] = Math.Max(l4c2[i * 10 + j], Math.Max(l4c2[i * 10 + j + 1], Math.Max(l4c2[(i + 1) * 10 + j], l4c2[(i + 1) * 10 + j + 1])));
                l5c3[ind_i * 5 + ind_j] = Math.Max(l4c3[i * 10 + j], Math.Max(l4c3[i * 10 + j + 1], Math.Max(l4c3[(i + 1) * 10 + j], l4c3[(i + 1) * 10 + j + 1])));
                l5c4[ind_i * 5 + ind_j] = Math.Max(l4c4[i * 10 + j], Math.Max(l4c4[i * 10 + j + 1], Math.Max(l4c4[(i + 1) * 10 + j], l4c4[(i + 1) * 10 + j + 1])));
                l5c5[ind_i * 5 + ind_j] = Math.Max(l4c5[i * 10 + j], Math.Max(l4c5[i * 10 + j + 1], Math.Max(l4c5[(i + 1) * 10 + j], l4c5[(i + 1) * 10 + j + 1])));
                l5c6[ind_i * 5 + ind_j] = Math.Max(l4c6[i * 10 + j], Math.Max(l4c6[i * 10 + j + 1], Math.Max(l4c6[(i + 1) * 10 + j], l4c6[(i + 1) * 10 + j + 1])));
                l5c7[ind_i * 5 + ind_j] = Math.Max(l4c7[i * 10 + j], Math.Max(l4c7[i * 10 + j + 1], Math.Max(l4c7[(i + 1) * 10 + j], l4c7[(i + 1) * 10 + j + 1])));
                l5c8[ind_i * 5 + ind_j] = Math.Max(l4c8[i * 10 + j], Math.Max(l4c8[i * 10 + j + 1], Math.Max(l4c8[(i + 1) * 10 + j], l4c8[(i + 1) * 10 + j + 1])));
                l5c9[ind_i * 5 + ind_j] = Math.Max(l4c9[i * 10 + j], Math.Max(l4c9[i * 10 + j + 1], Math.Max(l4c9[(i + 1) * 10 + j], l4c9[(i + 1) * 10 + j + 1])));
                l5c10[ind_i * 5 + ind_j] = Math.Max(l4c10[i * 10 + j], Math.Max(l4c10[i * 10 + j + 1], Math.Max(l4c10[(i + 1) * 10 + j], l4c10[(i + 1) * 10 + j + 1])));
                l5c11[ind_i * 5 + ind_j] = Math.Max(l4c11[i * 10 + j], Math.Max(l4c11[i * 10 + j + 1], Math.Max(l4c11[(i + 1) * 10 + j], l4c11[(i + 1) * 10 + j + 1])));
                l5c12[ind_i * 5 + ind_j] = Math.Max(l4c12[i * 10 + j], Math.Max(l4c12[i * 10 + j + 1], Math.Max(l4c12[(i + 1) * 10 + j], l4c12[(i + 1) * 10 + j + 1])));
                l5c13[ind_i * 5 + ind_j] = Math.Max(l4c13[i * 10 + j], Math.Max(l4c13[i * 10 + j + 1], Math.Max(l4c13[(i + 1) * 10 + j], l4c13[(i + 1) * 10 + j + 1])));
                l5c14[ind_i * 5 + ind_j] = Math.Max(l4c14[i * 10 + j], Math.Max(l4c14[i * 10 + j + 1], Math.Max(l4c14[(i + 1) * 10 + j], l4c14[(i + 1) * 10 + j + 1])));
                l5c15[ind_i * 5 + ind_j] = Math.Max(l4c15[i * 10 + j], Math.Max(l4c15[i * 10 + j + 1], Math.Max(l4c15[(i + 1) * 10 + j], l4c15[(i + 1) * 10 + j + 1])));
                ind_j++;
            }
            ind_i++;
            ind_j = 0;
        }


        //  Prediction (set pred based on the index of the maximum value)
        int maxIndex = 0;
        for (int i = 1; i < l5c15.Length; i++)
        {
            if (l5c15[i] > l5c15[maxIndex])
            {
                maxIndex = i;
            }
        }
        pred = maxIndex;


        // Image segment
        for (int i = n1; i < n1 + 32 * 3; i++)
        {
            cols[i * targetTexture.width + m1] = Color.blue;
            cols[i * targetTexture.width + m1 + 32 * 3] = Color.blue;
        }
        for (int j = m1; j < m1 + 32 * 3; j++)
        {
            cols[n1 * targetTexture.width + j] = Color.blue;
            cols[(n1 + 32 * 3) * targetTexture.width + j] = Color.blue;
        }
        targetTexture.SetPixels32(cols);
        targetTexture.Apply();
        rndr.material.mainTexture = targetTexture;
        gameObject.GetComponent<Renderer>().enabled = true;
    }
    static double SumProduct(double[] array, double[] weights, int arrayStartIndex, int weightsStartIndex, int count)
    {
        double sum = 0;
        for (int k = 0; k < count; k++)
        {
            sum += array[arrayStartIndex + k] * weights[weightsStartIndex + k];
        }
        return sum;
    }
}